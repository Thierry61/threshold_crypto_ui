{"version":3,"sources":["js/convert.js","js/errors.js","js/index.js","../node_modules/parcel-bundler/src/builtins/bundle-url.js","../node_modules/parcel-bundler/src/builtins/bundle-loader.js","../node_modules/parcel-plugin-wasm.rs/wasm-loader.js"],"names":["asciiToUint8Array","a","b","Uint8Array","length","i","charCodeAt","uint8ArrayToAscii","String","fromCharCode","apply","hexToUint8Array","h","match","map","byte","parseInt","uint8ArrayToHex","reduce","str","toString","padStart","uint8ArrayToBase64","btoa","base64ToUint8Array","atob","split","c","ErrorDisplay","selector","el","document","querySelectorAll","show","msg","textContent","classList","remove","hide","add","skErrMsg","size","skLen","errMsg","pkErrMsg","pkLen","sigErrMsg","sigLen","msgErrMsg","maxMsgLen","ctErrMsg","ctLen","deriveError","signError","verifyError","encryptError","decryptError","maxCtLen","DOM","skToPk","generate","skHex","pkHex","signMsg","sig","verify","valid","encrypt","ct","decrypt","stk","threshold","polyHex","mskHex","mpkHex","totalKeys","skset","pkset","addEventListener","skHexToPkHex","generateSk","generatePoly","deriveStk","isWasming","sk_bytes_to_pk_bytes_wasm","s","pkBytes","set_sk_byte","derive_pk_from_sk","pkByte","wasmExports","get_pk_byte","push","e","sign_msg_wasm","m","sigBytes","set_msg_byte","sign_msg","sigByte","get_sig_byte","verify_wasm","p","verified","set_pk_byte","set_sig_byte","set_rng_values_wasm","window","crypto","RNG_VALUES_SIZE","get_rng_values_size","rngValues","Uint32Array","getRandomValues","set_rng_value","alert","encrypt_wasm","ctBytes","entropy","r1","r2","ctSize","ctByte","get_ct_byte","decrypt_wasm","msgBytes","set_ct_byte","msgSize","msgByte","get_msg_byte","generate_poly_wasm","polySize","generate_poly","polyBytes","polyByte","get_poly_byte","get_msk_bytes_wasm","mskBytes","mskByte","get_msk_byte","get_mpk_bytes_wasm","mpkBytes","mpkByte","get_mpk_byte","get_skshare_wasm","skshareBytes","skshareByte","get_skshare_byte","get_pkshare_wasm","pkshareBytes","pkshareByte","get_pkshare_byte","value","max_retries","console","log","setTimeout","trim","signDebounce","clearTimeout","sigHex","verifyDebounce","encryptDebounce","ctHex","msgAscii","v","set_poly_byte","get_poly_degree","derive_master_key","n","skshares","pkshares","derive_key_share","bundleURL","getBundleURLCached","getBundleURL","Error","err","matches","stack","getBaseURL","url","replace","exports","require","loadBundlesLazy","bundles","Array","isArray","id","Promise","resolve","code","LazyPromise","reject","loadBundles","slice","then","all","loadBundle","bundleLoaders","registerBundleLoader","type","loader","module","load","register","bundle","substring","lastIndexOf","toLowerCase","bundleLoader","resolved","catch","executor","promise","prototype","onSuccess","onError"],"mappings":"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","file":"js.707bd789.js","sourceRoot":"../html","sourcesContent":["// Encoding conversions\n\n// modified from https://stackoverflow.com/a/11058858\nexport function asciiToUint8Array(a) {\n    let b = new Uint8Array(a.length);\n    for (let i=0; i<a.length; i++) {\n        b[i] = a.charCodeAt(i);\n    }\n    return b;\n}\n// https://stackoverflow.com/a/19102224\n// TODO resolve RangeError possibility here, see SO comments\nexport function uint8ArrayToAscii(a) {\n    return String.fromCharCode.apply(null, a);\n}\n// https://stackoverflow.com/a/50868276\nexport function hexToUint8Array(h) {\n    return new Uint8Array(h.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n}\nexport function uint8ArrayToHex(a) {\n    return a.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n}\n// https://stackoverflow.com/a/12713326\nexport function uint8ArrayToBase64(a) {\n    return btoa(String.fromCharCode.apply(null, a));\n}\nexport function base64ToUint8Array(b) {\n    return new Uint8Array(atob(b).split(\"\").map(function(c) {\n            return c.charCodeAt(0);\n    }));\n}\n","let ErrorDisplay = function(selector) {\n\n    let el = document.querySelectorAll(selector)[0];\n\n    this.show = function(msg) {\n        el.textContent = msg;\n        el.classList.remove(\"hidden\");\n    }\n\n    this.hide = function() {\n        el.classList.add(\"hidden\");\n    }\n\n};\n\nexport function skErrMsg(size, skLen) {\n    let errMsg = \"Secret Key length must be \";\n    errMsg += (skLen * 2).toString();\n    errMsg += \" hex chars, \";\n    errMsg += size.toString();\n    errMsg += \" provided.\";\n    return errMsg;\n}\n\nexport function pkErrMsg(size, pkLen) {\n    let errMsg = \"Public Key length must be \";\n    errMsg += (pkLen * 2).toString();\n    errMsg += \" hex chars, \";\n    errMsg += size.toString();\n    errMsg += \" provided.\";\n    return errMsg;\n}\n\nexport function sigErrMsg(size, sigLen) {\n    let errMsg = \"Signature length must be \";\n    errMsg += (sigLen * 2).toString();\n    errMsg += \" hex chars, \";\n    errMsg += size.toString();\n    errMsg += \" provided.\";\n    return errMsg;\n}\n\nexport function msgErrMsg(size) {\n    let errMsg = \"Message length must be \";\n    errMsg += (maxMsgLen).toString();\n    errMsg += \" chars, \";\n    errMsg += size.toString();\n    errMsg += \" provided.\";\n    return errMsg;\n}\n\nexport function ctErrMsg(size) {\n    let errMsg = \"Ciphertext length must be \";\n    errMsg += (ctLen * 2).toString();\n    errMsg += \" hex chars, \";\n    errMsg += size.toString();\n    errMsg += \" provided.\";\n    return errMsg;\n}\n\nexport let deriveError = new ErrorDisplay(\"#sk-to-pk .error\");\nexport let signError = new ErrorDisplay(\"#sign-msg .error\");\nexport let verifyError = new ErrorDisplay(\"#verify .error\");\nexport let encryptError = new ErrorDisplay(\"#encrypt .error\");\nexport let decryptError = new ErrorDisplay(\"#decrypt .error\");\n","import wasmExports from '../../Cargo.toml'\n\nimport { asciiToUint8Array, uint8ArrayToAscii, hexToUint8Array, uint8ArrayToHex } from './convert'\nimport { skErrMsg, pkErrMsg, sigErrMsg, msgErrMsg, ctErrMsg } from './errors'\nimport { deriveError, signError, verifyError, encryptError, decryptError } from './errors'\n\n///////////////\n// Contants\n///////////////\n\nconst skLen = 32; // bytes\nexport const pkLen = 48; // bytes\nconst sigLen = 96; // bytes\nconst maxMsgLen = 1049600; // bytes\nconst maxCtLen = 1049600; // bytes\n\n///////////////\n// Virtual DOM\n///////////////\n\nlet DOM = {};\nDOM.skToPk = {};\nDOM.skToPk.generate = document.querySelectorAll(\"#sk-to-pk .generate\")[0];\nDOM.skToPk.skHex = document.querySelectorAll(\"#sk-to-pk .sk-hex\")[0];\nDOM.skToPk.pkHex = document.querySelectorAll(\"#sk-to-pk .pk-hex\")[0];\nDOM.signMsg = {};\nDOM.signMsg.skHex = document.querySelectorAll(\"#sign-msg .sk-hex\")[0];\nDOM.signMsg.msg = document.querySelectorAll(\"#sign-msg .msg\")[0];\nDOM.signMsg.sig = document.querySelectorAll(\"#sign-msg .sig\")[0];\nDOM.verify = {};\nDOM.verify.pkHex = document.querySelectorAll(\"#verify .pk-hex\")[0];\nDOM.verify.msg = document.querySelectorAll(\"#verify .msg\")[0];\nDOM.verify.sig = document.querySelectorAll(\"#verify .sig\")[0];\nDOM.verify.valid = document.querySelectorAll(\"#verify .valid\")[0];\nDOM.encrypt = {};\nDOM.encrypt.pkHex = document.querySelectorAll(\"#encrypt .pk-hex\")[0];\nDOM.encrypt.msg = document.querySelectorAll(\"#encrypt .msg\")[0];\nDOM.encrypt.ct = document.querySelectorAll(\"#encrypt .ct\")[0];\nDOM.decrypt = {};\nDOM.decrypt.skHex = document.querySelectorAll(\"#decrypt .sk-hex\")[0];\nDOM.decrypt.ct = document.querySelectorAll(\"#decrypt .ct\")[0];\nDOM.decrypt.msg = document.querySelectorAll(\"#decrypt .msg\")[0];\nDOM.stk = {}; // simple threshold keys\nDOM.stk.generate = document.querySelectorAll(\"#simple-threshold-keys .generate\")[0];\nDOM.stk.threshold = document.querySelectorAll(\"#simple-threshold-keys .threshold\")[0];\nDOM.stk.polyHex = document.querySelectorAll(\"#simple-threshold-keys .poly-hex\")[0];\nDOM.stk.mskHex = document.querySelectorAll(\"#simple-threshold-keys .msk-hex\")[0];\nDOM.stk.mpkHex = document.querySelectorAll(\"#simple-threshold-keys .mpk-hex\")[0];\nDOM.stk.totalKeys = document.querySelectorAll(\"#simple-threshold-keys .total-keys\")[0];\nDOM.stk.skset = document.querySelectorAll(\"#simple-threshold-keys .skset\")[0];\nDOM.stk.pkset = document.querySelectorAll(\"#simple-threshold-keys .pkset\")[0];\n\n///////////////\n// Event handlers\n///////////////\n\nDOM.skToPk.skHex.addEventListener(\"input\", skHexToPkHex);\nDOM.skToPk.generate.addEventListener(\"click\", generateSk);\nDOM.signMsg.skHex.addEventListener(\"input\", signMsg);\nDOM.signMsg.msg.addEventListener(\"input\", signMsg);\nDOM.verify.pkHex.addEventListener(\"input\", verify);\nDOM.verify.msg.addEventListener(\"input\", verify);\nDOM.verify.sig.addEventListener(\"input\", verify);\nDOM.encrypt.pkHex.addEventListener(\"input\", encrypt);\nDOM.encrypt.msg.addEventListener(\"input\", encrypt);\nDOM.decrypt.skHex.addEventListener(\"input\", decrypt);\nDOM.decrypt.ct.addEventListener(\"input\", decrypt);\nDOM.stk.generate.addEventListener(\"click\", generatePoly);\nDOM.stk.polyHex.addEventListener(\"input\", deriveStk);\nDOM.stk.totalKeys.addEventListener(\"input\", deriveStk);\n\n///////////////\n// threshold_crypto wasm calls\n///////////////\n\nlet isWasming = false;\n\n// s is secret key unit8array\nfunction sk_bytes_to_pk_bytes_wasm(s) {\n    isWasming = true;\n    let pkBytes = [];\n    try {\n        // set sk bytes\n        for (let i=0; i<s.length; i++) {\n            wasmExports.set_sk_byte(i, s[i]);\n        }\n        // convert into pk bytes\n        wasmExports.derive_pk_from_sk();\n        // read pk bytes\n        for (let i=0; i<pkLen; i++) {\n            let pkByte = wasmExports.get_pk_byte(i);\n            pkBytes.push(pkByte);\n        }\n    }\n    catch (e) {\n        isWasming = false;\n        throw(\"Failed to generate\");\n    }\n    isWasming = false;\n    return pkBytes;\n}\n\n// s is secret key uint8array\n// m is message uint8array\nfunction sign_msg_wasm(s, m) {\n    isWasming = true;\n    let sigBytes = [];\n    try {\n        // set secret key bytes\n        for (let i=0; i<s.length; i++) {\n            wasmExports.set_sk_byte(i, s[i]);\n        }\n        // set message bytes\n        for (let i=0; i<m.length; i++) {\n            wasmExports.set_msg_byte(i, m[i]);\n        }\n        // sign message\n        wasmExports.sign_msg(m.length);\n        // get signature bytes\n        for (let i=0; i<sigLen; i++) {\n            let sigByte = wasmExports.get_sig_byte(i);\n            sigBytes.push(sigByte);\n        }\n    }\n    catch (e) {\n        isWasming = false;\n    }\n    isWasming = false;\n    return sigBytes;\n}\n\n// p is public key uint8array\n// s is signature uint8array\n// m is message uint8array\nfunction verify_wasm(p, s, m) {\n    isWasming = true;\n    let verified = false;\n    try {\n        // set public key bytes\n        for (let i=0; i<p.length; i++) {\n            wasmExports.set_pk_byte(i, p[i]);\n        }\n        // set signature bytes\n        for (let i=0; i<s.length; i++) {\n            wasmExports.set_sig_byte(i, s[i]);\n        }\n        // set message bytes\n        for (let i=0; i<m.length; i++) {\n            wasmExports.set_msg_byte(i, m[i]);\n        }\n        verified = wasmExports.verify(m.length);\n    }\n    catch (e) {\n        isWasming = false;\n    }\n    isWasming = false;\n    return verified;\n}\n\nexport function set_rng_values_wasm() {\n    // Warning if no window.crypto available\n    if (!window.crypto) {\n        alert(\"Secure randomness not available in this browser, output is insecure.\");\n        return\n    }\n    let RNG_VALUES_SIZE = wasmExports.get_rng_values_size();\n    let rngValues = new Uint32Array(RNG_VALUES_SIZE);\n    window.crypto.getRandomValues(rngValues);\n    for (let i=0; i<rngValues.length; i++) {\n        wasmExports.set_rng_value(i, rngValues[i]);\n    }\n}\n\n// p is public key uint8array\n// m is message uint8array\nfunction encrypt_wasm(p, m) {\n    isWasming = true;\n    let ctBytes = [];\n    try {\n        set_rng_values_wasm();\n        // set public key bytes\n        for (let i=0; i<p.length; i++) {\n            wasmExports.set_pk_byte(i, p[i]);\n        }\n        // set message bytes\n        for (let i=0; i<m.length; i++) {\n            wasmExports.set_msg_byte(i, m[i]);\n        }\n        // generate strong random u64 used by encrypt\n        let entropy = new Uint32Array(2);\n        window.crypto.getRandomValues(entropy);\n        let r1 = entropy[0];\n        let r2 = entropy[1];\n        // encrypt the message\n        let ctSize = wasmExports.encrypt(m.length, r1, r2);\n        // get ciphertext bytes\n        for (let i=0; i<ctSize; i++) {\n            let ctByte = wasmExports.get_ct_byte(i);\n            ctBytes.push(ctByte);\n        }\n    }\n    catch (e) {\n        isWasming = false;\n    }\n    isWasming = false;\n    return ctBytes;\n}\n\n// s is secret key uint8array\n// c is message uint8array\nfunction decrypt_wasm(s, c) {\n    isWasming = true;\n    let msgBytes = [];\n    try {\n        // set secret key bytes\n        for (let i=0; i<s.length; i++) {\n            wasmExports.set_sk_byte(i, s[i]);\n        }\n        // set ciphertext bytes\n        for (let i=0; i<c.length; i++) {\n            wasmExports.set_ct_byte(i, c[i]);\n        }\n        let msgSize = wasmExports.decrypt(c.length);\n        // get message bytes\n        for (let i=0; i<msgSize; i++) {\n            let msgByte = wasmExports.get_msg_byte(i);\n            msgBytes.push(msgByte);\n        }\n    }\n    catch (e) {\n        isWasming = false;\n    }\n    isWasming = false;\n    return msgBytes;\n}\n\nfunction generate_poly_wasm(threshold) {\n    set_rng_values_wasm();\n    let entropy = new Uint32Array(2);\n    window.crypto.getRandomValues(entropy);\n    let r1 = entropy[0];\n    let r2 = entropy[1];\n    let polySize = wasmExports.generate_poly(threshold, r1, r2);\n    let polyBytes = [];\n    for (let i=0; i<polySize; i++) {\n        let polyByte = wasmExports.get_poly_byte(i);\n        polyBytes.push(polyByte);\n    }\n    return polyBytes;\n}\n\nfunction get_msk_bytes_wasm() {\n    let mskBytes = [];\n    for (let i=0; i<skLen; i++) {\n        let mskByte = wasmExports.get_msk_byte(i);\n        mskBytes.push(mskByte);\n    }\n    return mskBytes;\n}\n\nfunction get_mpk_bytes_wasm() {\n    let mpkBytes = [];\n    for (let i=0; i<pkLen; i++) {\n        let mpkByte = wasmExports.get_mpk_byte(i);\n        mpkBytes.push(mpkByte);\n    }\n    return mpkBytes;\n}\n\nfunction get_skshare_wasm() {\n    let skshareBytes = [];\n    for (let i=0; i<skLen; i++) {\n        let skshareByte = wasmExports.get_skshare_byte(i);\n        skshareBytes.push(skshareByte);\n    }\n    return skshareBytes;\n}\n\nfunction get_pkshare_wasm() {\n    let pkshareBytes = [];\n    for (let i=0; i<pkLen; i++) {\n        let pkshareByte = wasmExports.get_pkshare_byte(i);\n        pkshareBytes.push(pkshareByte);\n    }\n    return pkshareBytes;\n}\n\n///////////////\n// Handler methods\n///////////////\n\nfunction generateSk() {\n    // Clear existing values\n    DOM.skToPk.skHex.value = \"\";\n    DOM.skToPk.pkHex.value = \"\";\n    // Not all entropy can be deserialized by threshold_crypto.\n    // Try up to ten times until we get a valid sk.\n    let max_retries = 20;\n    for (let i=0; i<max_retries; i++) {\n        try {\n            let entropy = new Uint8Array(skLen);\n            window.crypto.getRandomValues(entropy);\n            let h = uint8ArrayToHex(entropy);\n            DOM.skToPk.skHex.value = h;\n            skHexToPkHex();\n            console.log((i+1) + \" attempts to generate sk\");\n            break;\n        }\n        catch (e) {\n            // TODO maybe log a message if more than max_retries attempted?\n        }\n    }\n}\n\nfunction skHexToPkHex() {\n    deriveError.hide();\n    // if already using wasm buffers, try again later\n    if (isWasming) {\n        setTimeout(skHexToPkHex, 200);\n        return;\n    }\n    // clear existing value\n    DOM.skToPk.pkHex.value = \"\";\n    // get secret key hex from UI\n    let skHex = DOM.skToPk.skHex.value.trim();\n    if (skHex.length == 0) {\n        return;\n    }\n    if (skHex.length != skLen * 2) {\n        let errMsg = skErrMsg(skHex.length, skLen);\n        deriveError.show(errMsg);\n        return;\n    }\n    // convert sk to bytes\n    let b = hexToUint8Array(skHex);\n    // get public key from sk, will be 48 bytes ie 96 hex chars\n    let pkBytes = sk_bytes_to_pk_bytes_wasm(b);\n    // convert pk to hex\n    let pkHex = uint8ArrayToHex(pkBytes);\n    // show in UI\n    DOM.skToPk.pkHex.value = pkHex;\n}\n\nlet signDebounce = null;\nfunction signMsg() {\n    signError.hide();\n    // if already using wasm buffers, try again later\n    if (isWasming) {\n        setTimeout(signMsg, 200);\n        return;\n    }\n    // if typing is happening quickly wait until it stops.\n    if (signDebounce != null) {\n        clearTimeout(signDebounce);\n    }\n    signDebounce = setTimeout(function() {\n        // clear existing value\n        DOM.signMsg.sig.value = \"\";\n        // get secret key hex from UI\n        let skHex = DOM.signMsg.skHex.value.trim();\n        if (skHex.length == 0) {\n            return;\n        }\n        if (skHex.length != skLen * 2) {\n            let errMsg = skErrMsg(skHex.length, skLen);\n            signError.show(errMsg);\n            return;\n        }\n        // convert sk to bytes\n        let s = hexToUint8Array(skHex);\n        // get msg from UI\n        let msg = DOM.signMsg.msg.value; // NB no trim() here\n        if (msg.length <= 0) {\n            return\n        }\n        if (msg.length > maxMsgLen) {\n            let errMsg = msgErrMsg(msg.length);\n            signError.show(errMsg);\n            return;\n        }\n        let m = asciiToUint8Array(msg);\n        // get signature\n        let sigBytes = sign_msg_wasm(s, m);\n        let sigHex = uint8ArrayToHex(sigBytes);\n        DOM.signMsg.sig.value = sigHex;\n    }, 200);\n}\n\nlet verifyDebounce = null;\nfunction verify() {\n    verifyError.hide();\n    // if already using wasm buffers, try again later\n    if (isWasming) {\n        setTimeout(verify, 200);\n        return;\n    }\n    // if typing is happening quickly wait until it stops.\n    if (verifyDebounce != null) {\n        clearTimeout(verifyDebounce);\n    }\n    verifyDebounce = setTimeout(function() {\n        // clear existing value\n        DOM.verify.valid.value = \"\";\n        // get public key hex from UI\n        let pkHex = DOM.verify.pkHex.value.trim();\n        if (pkHex.length == 0) {\n            return;\n        }\n        if (pkHex.length != pkLen * 2) {\n            let errMsg = pkErrMsg(pkHex.length, pkLen);\n            verifyError.show(errMsg);\n            return;\n        }\n        // convert public key to bytes\n        let p = hexToUint8Array(pkHex);\n        // get signature hex from UI\n        let sigHex = DOM.verify.sig.value.trim();\n        if (sigHex.length == 0) {\n            return;\n        }\n        if (sigHex.length != 192) {\n            let errMsg = sigErrMsg(sigHex.length, sigLen);\n            verifyError.show(errMsg);\n            return;\n        }\n        // convert signature to bytes\n        let s = hexToUint8Array(sigHex);\n        // get msg from UI\n        let msg = DOM.verify.msg.value; // NB no trim() here\n        if (msg.length == 0) {\n            return;\n        }\n        if (msg.length > maxMsgLen) {\n            let errMsg = msgErrMsg(msg.length);\n            verifyError.show(errMsg);\n            return;\n        }\n        let m = asciiToUint8Array(msg);\n        // verify\n        let valid = verify_wasm(p, s, m);\n        DOM.verify.valid.value = valid ? \"valid\" : \"invalid\";\n    }, 200);\n}\n\nlet encryptDebounce = null;\nfunction encrypt() {\n    encryptError.hide();\n    // if already using wasm buffers, try again later\n    if (isWasming) {\n        setTimeout(encrypt, 200);\n        return;\n    }\n    // if typing is happening quickly wait until it stops.\n    if (encryptDebounce != null) {\n        clearTimeout(encryptDebounce);\n    }\n    encryptDebounce = setTimeout(function() {\n        // clear existing value\n        DOM.encrypt.ct.value = \"\";\n        // get public key hex from UI\n        let pkHex = DOM.encrypt.pkHex.value.trim();\n        if (pkHex.length == 0) {\n            return;\n        }\n        if (pkHex.length != pkLen * 2) {\n            let errMsg = pkErrMsg(pkHex.length, pkLen);\n            encryptError.show(errMsg);\n            return;\n        }\n        // convert public key to bytes\n        let p = hexToUint8Array(pkHex);\n        // get msg from UI\n        let msg = DOM.encrypt.msg.value; // NB no trim() here\n        if (msg.length == 0) {\n            return;\n        }\n        if (msg.length > maxMsgLen) {\n            let errMsg = msgErrMsg(msg.length);\n            encryptError.show(errMsg);\n            return;\n        }\n        let m = asciiToUint8Array(msg);\n        // encrypt\n        let ctBytes = encrypt_wasm(p, m);\n        let ctHex = uint8ArrayToHex(ctBytes);\n        DOM.encrypt.ct.value = ctHex;\n    }, 200);\n}\n\nfunction decrypt() {\n    decryptError.hide();\n    // if already using wasm buffers, try again later\n    if (isWasming) {\n        setTimeout(decrypt, 200);\n        return;\n    }\n    // clear existing value\n    DOM.decrypt.msg.value = \"\";\n    // get secret key hex from UI\n    let skHex = DOM.decrypt.skHex.value.trim();\n    if (skHex.length == 0) {\n        return;\n    }\n    if (skHex.length != skLen * 2) {\n        let errMsg = skErrMsg(skHex.length, skLen);\n        decryptError.show(errMsg);\n        return;\n    }\n    // convert secret key to bytes\n    let s = hexToUint8Array(skHex);\n    // get msg from UI\n    let ctHex = DOM.decrypt.ct.value.trim();\n    if (ctHex.length == 0) {\n        return;\n    }\n    if (ctHex.length > maxCtLen * 2) {\n        let errMsg = ctErrMsg(ctHex.length);\n        decryptError.show(errMsg);\n        return;\n    }\n    let c = hexToUint8Array(ctHex);\n    // decrypt\n    let msgBytes = decrypt_wasm(s, c);\n    let msgAscii = uint8ArrayToAscii(msgBytes);\n    DOM.decrypt.msg.value = msgAscii;\n}\n\nfunction generatePoly() {\n    let threshold = parseInt(DOM.stk.threshold.value);\n    let polyBytes = generate_poly_wasm(threshold);\n    let polyHex = uint8ArrayToHex(polyBytes);\n    DOM.stk.polyHex.value = polyHex;\n    deriveStk();\n}\n\nfunction deriveStk() {\n    // set poly in wasm\n    let polyHex = DOM.stk.polyHex.value;\n    let polyBytes = hexToUint8Array(polyHex);\n    for (let i=0; i<polyBytes.length; i++) {\n        let v = polyBytes[i];\n        wasmExports.set_poly_byte(i, v);\n    }\n    // get threshold\n    let threshold = wasmExports.get_poly_degree();\n    DOM.stk.threshold.value = threshold;\n    // derive master keys, ie index 0\n    let mkIndex = 0;\n    wasmExports.derive_master_key();\n    // show master secret key\n    let mskBytes = get_msk_bytes_wasm();\n    let mskHex = uint8ArrayToHex(mskBytes);\n    DOM.stk.mskHex.value = mskHex;\n    // show master public key\n    let mpkBytes = get_mpk_bytes_wasm();\n    let mpkHex = uint8ArrayToHex(mpkBytes);\n    DOM.stk.mpkHex.value = mpkHex;\n    // derive keys, ie index 1 to N\n    let n = parseInt(DOM.stk.totalKeys.value);\n    let skshares = \"\";\n    let pkshares = \"\";\n    for (let i=0; i<n; i++) {\n        wasmExports.derive_key_share(i);\n        let skshareBytes = get_skshare_wasm();\n        let skshareHex = uint8ArrayToHex(skshareBytes);\n        skshares += skshareHex + \"\\n\";\n        // show master public key\n        let pkshareBytes = get_pkshare_wasm();\n        let pkshareHex = uint8ArrayToHex(pkshareBytes);\n        pkshares += pkshareHex + \"\\n\";\n    }\n    DOM.stk.skset.value = skshares.trim();\n    DOM.stk.pkset.value = pkshares.trim();\n}\n","var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var getBundleURL = require('./bundle-url').getBundleURL;\n\nfunction loadBundlesLazy(bundles) {\n  if (!Array.isArray(bundles)) {\n    bundles = [bundles]\n  }\n\n  var id = bundles[bundles.length - 1];\n\n  try {\n    return Promise.resolve(require(id));\n  } catch (err) {\n    if (err.code === 'MODULE_NOT_FOUND') {\n      return new LazyPromise(function (resolve, reject) {\n        loadBundles(bundles.slice(0, -1))\n          .then(function () {\n            return require(id);\n          })\n          .then(resolve, reject);\n      });\n    }\n\n    throw err;\n  }\n}\n\nfunction loadBundles(bundles) {\n  return Promise.all(bundles.map(loadBundle));\n}\n\nvar bundleLoaders = {};\nfunction registerBundleLoader(type, loader) {\n  bundleLoaders[type] = loader;\n}\n\nmodule.exports = exports = loadBundlesLazy;\nexports.load = loadBundles;\nexports.register = registerBundleLoader;\n\nvar bundles = {};\nfunction loadBundle(bundle) {\n  var id;\n  if (Array.isArray(bundle)) {\n    id = bundle[1];\n    bundle = bundle[0];\n  }\n\n  if (bundles[bundle]) {\n    return bundles[bundle];\n  }\n\n  var type = (bundle.substring(bundle.lastIndexOf('.') + 1, bundle.length) || bundle).toLowerCase();\n  var bundleLoader = bundleLoaders[type];\n  if (bundleLoader) {\n    return bundles[bundle] = bundleLoader(getBundleURL() + bundle)\n      .then(function (resolved) {\n        if (resolved) {\n          module.bundle.register(id, resolved);\n        }\n\n        return resolved;\n      }).catch(function(e) {\n        delete bundles[bundle];\n        \n        throw e;\n      });\n  }\n}\n\nfunction LazyPromise(executor) {\n  this.executor = executor;\n  this.promise = null;\n}\n\nLazyPromise.prototype.then = function (onSuccess, onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.then(onSuccess, onError)\n};\n\nLazyPromise.prototype.catch = function (onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.catch(onError)\n};\n","var wasm;const __exports = {};\n\n/**\n* @returns {number}\n*/\n__exports. get_rng_values_size = function() {\n    var ret = wasm.get_rng_values_size();\n    return ret >>> 0;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_rng_value = function(i, v) {\n    wasm.set_rng_value(i, v);\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_sk_byte = function(i, v) {\n    wasm.set_sk_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_sk_byte = function(i) {\n    var ret = wasm.get_sk_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_pk_byte = function(i, v) {\n    wasm.set_pk_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_pk_byte = function(i) {\n    var ret = wasm.get_pk_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_sig_byte = function(i, v) {\n    wasm.set_sig_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_sig_byte = function(i) {\n    var ret = wasm.get_sig_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_msg_byte = function(i, v) {\n    wasm.set_msg_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_msg_byte = function(i) {\n    var ret = wasm.get_msg_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_ct_byte = function(i, v) {\n    wasm.set_ct_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_ct_byte = function(i) {\n    var ret = wasm.get_ct_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_poly_byte = function(i, v) {\n    wasm.set_poly_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_poly_byte = function(i) {\n    var ret = wasm.get_poly_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_msk_byte = function(i, v) {\n    wasm.set_msk_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_msk_byte = function(i) {\n    var ret = wasm.get_msk_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_mpk_byte = function(i, v) {\n    wasm.set_mpk_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_mpk_byte = function(i) {\n    var ret = wasm.get_mpk_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_skshare_byte = function(i, v) {\n    wasm.set_skshare_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_skshare_byte = function(i) {\n    var ret = wasm.get_skshare_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_pkshare_byte = function(i, v) {\n    wasm.set_pkshare_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_pkshare_byte = function(i) {\n    var ret = wasm.get_pkshare_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} from_node\n* @param {number} to_node\n* @param {number} v\n*/\n__exports. set_bivar_row_byte = function(i, from_node, to_node, v) {\n    wasm.set_bivar_row_byte(i, from_node, to_node, v);\n}\n\n/**\n* @param {number} i\n* @param {number} from_node\n* @param {number} to_node\n* @returns {number}\n*/\n__exports. get_bivar_row_byte = function(i, from_node, to_node) {\n    var ret = wasm.get_bivar_row_byte(i, from_node, to_node);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} from_node\n* @param {number} v\n*/\n__exports. set_bivar_commitment_byte = function(i, from_node, v) {\n    wasm.set_bivar_commitment_byte(i, from_node, v);\n}\n\n/**\n* @param {number} i\n* @param {number} from_node\n* @returns {number}\n*/\n__exports. get_bivar_commitment_byte = function(i, from_node) {\n    var ret = wasm.get_bivar_commitment_byte(i, from_node);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} node_index\n* @param {number} v\n*/\n__exports. set_bivar_sks_byte = function(i, node_index, v) {\n    wasm.set_bivar_sks_byte(i, node_index, v);\n}\n\n/**\n* @param {number} i\n* @param {number} node_index\n* @returns {number}\n*/\n__exports. get_bivar_sks_byte = function(i, node_index) {\n    var ret = wasm.get_bivar_sks_byte(i, node_index);\n    return ret;\n}\n\n/**\n*/\n__exports. derive_pk_from_sk = function() {\n    wasm.derive_pk_from_sk();\n}\n\n/**\n* @param {number} msg_size\n*/\n__exports. sign_msg = function(msg_size) {\n    wasm.sign_msg(msg_size);\n}\n\n/**\n* @param {number} msg_size\n* @returns {boolean}\n*/\n__exports. verify = function(msg_size) {\n    var ret = wasm.verify(msg_size);\n    return ret !== 0;\n}\n\n/**\n* @param {number} msg_size\n* @param {number} seed1\n* @param {number} seed2\n* @returns {number}\n*/\n__exports. encrypt = function(msg_size, seed1, seed2) {\n    var ret = wasm.encrypt(msg_size, seed1, seed2);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} ct_size\n* @returns {number}\n*/\n__exports. decrypt = function(ct_size) {\n    var ret = wasm.decrypt(ct_size);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} threshold\n* @param {number} seed1\n* @param {number} seed2\n* @returns {number}\n*/\n__exports. generate_poly = function(threshold, seed1, seed2) {\n    var ret = wasm.generate_poly(threshold, seed1, seed2);\n    return ret >>> 0;\n}\n\n/**\n* @returns {number}\n*/\n__exports. get_poly_degree = function() {\n    var ret = wasm.get_poly_degree();\n    return ret >>> 0;\n}\n\n/**\n*/\n__exports. derive_master_key = function() {\n    wasm.derive_master_key();\n}\n\n/**\n* @param {number} i\n*/\n__exports. derive_key_share = function(i) {\n    wasm.derive_key_share(i);\n}\n\n/**\n* @returns {number}\n*/\n__exports. get_rng_next_count = function() {\n    var ret = wasm.get_rng_next_count();\n    return ret >>> 0;\n}\n\n/**\n* @param {number} threshold\n* @param {number} total_nodes\n*/\n__exports. generate_bivars = function(threshold, total_nodes) {\n    wasm.generate_bivars(threshold, total_nodes);\n}\n\n\n\n      function init(wasm_path) {\n          const fetchPromise = fetch(wasm_path);\n          let resultPromise;\n          if (typeof WebAssembly.instantiateStreaming === 'function') {\n              resultPromise = WebAssembly.instantiateStreaming(fetchPromise, { './threshold_crypto_wasm_bridge_bg.js': __exports });\n          } else {\n              resultPromise = fetchPromise\n              .then(response => response.arrayBuffer())\n              .then(buffer => WebAssembly.instantiate(buffer, { './threshold_crypto_wasm_bridge_bg.js': __exports }));\n          }\n          return resultPromise.then(({instance}) => {\n              wasm = init.wasm = instance.exports;\n              __exports.wasm = wasm;\n              return;\n          });\n      };\n      function init_node(wasm_path) {\n          const fs = require('fs');\n          return new Promise(function(resolve, reject) {\n              fs.readFile(__dirname + wasm_path, function(err, data) {\n                  if (err) {\n                      reject(err);\n                  } else {\n                      resolve(data.buffer);\n                  }\n              });\n          })\n          .then(data => WebAssembly.instantiate(data, { './threshold_crypto_wasm_bridge_bg': __exports }))\n          .then(({instance}) => {\n              wasm = init.wasm = instance.exports;\n              __exports.wasm = wasm;\n              return;\n          });\n      }\n      const wasm_bindgen = Object.assign(false ? init_node : init, __exports);\n      module.exports = function loadWASMBundle(bundle) {\n            return wasm_bindgen(bundle).then(() => __exports)\n      }\n    "]}