{"version":3,"sources":["js/constants.js","js/errors.js"],"names":["skLen","pkLen","sigLen","maxMsgLen","maxCtLen","row_sizes_by_threshold","commitment_sizes_by_threshold","poly_sizes_by_threshold","ErrorDisplay","selector","el","document","querySelectorAll","show","msg","textContent","classList","remove","hide","add","errorMessages","skLength","size","errMsg","toString","pkLength","sigLength","msgLength","ctLength","ctLen"],"mappings":";AA0CO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,wBAAA,QAAA,8BAAA,QAAA,uBAAA,QAAA,SAAA,QAAA,UAAA,QAAA,OAAA,QAAA,MAAA,QAAA,WAAA,EAxCA,IAAMA,EAAQ,GAwCd,QAAA,MAAA,EAvCA,IAAMC,EAAQ,GAuCd,QAAA,MAAA,EAtCA,IAAMC,EAAS,GAsCf,QAAA,OAAA,EArCA,IAAMC,EAAY,QAqClB,QAAA,UAAA,EApCA,IAAMC,EAAW,QAoCjB,QAAA,SAAA,EAhCA,IAAMC,EAAyB,CAClC,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAqBG,QAAA,uBAAA,EAhBA,IAAMC,EAAgC,CACzC,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAKG,QAAA,8BAAA,EAAA,IAAMC,EAA0B,CACnC,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAXG,QAAA,wBAAA;;ACzBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,QAAA,mBAAA,EAjBP,IAAA,EAAA,QAAA,eAEO,SAASC,EAAaC,GAErBC,IAAAA,EAAKC,SAASC,iBAAiBH,GAAU,GAExCI,KAAAA,KAAO,SAASC,GACjBJ,EAAGK,YAAcD,EACjBJ,EAAGM,UAAUC,OAAO,WAGnBC,KAAAA,KAAO,WACRR,EAAGM,UAAUG,IAAI,WAKlB,IAAMC,EAAgB,CAEzBC,SAAU,SAASC,GACXC,IAAAA,EAAS,6BAKNA,OAJPA,IAAmB,EAARvB,EAAQ,OAAGwB,WACtBD,GAAU,eACVA,GAAUD,EAAKE,WACfD,GAAU,cAIdE,SAAU,SAASH,GACfC,IAAAA,EAAS,6BAKFA,OAJPA,IAAmB,EAARtB,EAAQ,OAAGuB,WACtBD,GAAU,eACVA,GAAUD,EAAKE,WACfD,GAAU,cAIdG,UAAW,SAASJ,GACZC,IAAAA,EAAS,4BAKNA,OAJPA,IAAoB,EAATrB,EAAS,QAAGsB,WACvBD,GAAU,eACVA,GAAUD,EAAKE,WACfD,GAAU,cAIdI,UAAW,SAASL,GACZC,IAAAA,EAAS,0BAKNA,OAJPA,GAAWpB,EAAD,UAAYqB,WACtBD,GAAU,WACVA,GAAUD,EAAKE,WACfD,GAAU,cAIdK,SAAU,SAASN,GACXC,IAAAA,EAAS,6BAKNA,OAJPA,IAAmB,EAARM,EAAQ,OAAGL,WACtBD,GAAU,eACVA,GAAUD,EAAKE,WACfD,GAAU,eA3CX,QAAA,cAAA","file":"errors.ae0c5d01.js","sourceRoot":"../html","sourcesContent":["// Contants\n\nexport const skLen = 32; // bytes\nexport const pkLen = 48; // bytes\nexport const sigLen = 96; // bytes\nexport const maxMsgLen = 1049600; // bytes\nexport const maxCtLen = 1049600; // bytes\n\n// the number of bytes in a row derived from a BivarPoly\n// which varies depending on the threshold.\nexport const row_sizes_by_threshold = [\n    40, // threshold 0\n    72, // threshold 1\n    104, // threshold 2\n    136, // threshold 3\n    168, // threshold 4\n    200, // threshold 5\n    232, // threshold 6\n    264, // threshold 7\n    296, // threshold 8\n    328, // threshold 9\n    360, // threshold 10\n]\n\n// the number of bytes in a commitment derived from a BivarPoly\n// which varies depending on the threshold.\nexport const commitment_sizes_by_threshold = [\n    56, // threshold 0\n    104, // threshold 1\n    152, // threshold 2\n    200, // threshold 3\n    248, // threshold 4\n    296, // threshold 5\n    344, // threshold 6\n    392, // threshold 7\n    440, // threshold 8\n    488, // threshold 9\n    536, // threshold 10\n]\n\n// the number of bytes in the master secret key (Poly)\n// which varies depending on the threshold.\nexport const poly_sizes_by_threshold = [\n    40, // threshold 0\n    72, // threshold 1\n    104, // threshold 2\n    136, // threshold 3\n    168, // threshold 4\n    200, // threshold 5\n    232, // threshold 6\n    264, // threshold 7\n    296, // threshold 8\n    328, // threshold 9\n    360, // threshold 10\n]\n","import { skLen, pkLen, sigLen, maxMsgLen, ctLen } from './constants'\n\nexport function ErrorDisplay(selector) {\n\n    let el = document.querySelectorAll(selector)[0];\n\n    this.show = function(msg) {\n        el.textContent = msg;\n        el.classList.remove(\"hidden\");\n    }\n\n    this.hide = function() {\n        el.classList.add(\"hidden\");\n    }\n\n};\n\nexport const errorMessages = {\n\n    skLength: function(size) {\n        let errMsg = \"Secret Key length must be \";\n        errMsg += (skLen * 2).toString();\n        errMsg += \" hex chars, \";\n        errMsg += size.toString();\n        errMsg += \" provided.\";\n        return errMsg;\n    },\n\n    pkLength: function(size) {\n    let errMsg = \"Public Key length must be \";\n        errMsg += (pkLen * 2).toString();\n        errMsg += \" hex chars, \";\n        errMsg += size.toString();\n        errMsg += \" provided.\";\n        return errMsg;\n    },\n\n    sigLength: function(size) {\n        let errMsg = \"Signature length must be \";\n        errMsg += (sigLen * 2).toString();\n        errMsg += \" hex chars, \";\n        errMsg += size.toString();\n        errMsg += \" provided.\";\n        return errMsg;\n    },\n\n    msgLength: function(size) {\n        let errMsg = \"Message length must be \";\n        errMsg += (maxMsgLen).toString();\n        errMsg += \" chars, \";\n        errMsg += size.toString();\n        errMsg += \" provided.\";\n        return errMsg;\n    },\n\n    ctLength: function(size) {\n        let errMsg = \"Ciphertext length must be \";\n        errMsg += (ctLen * 2).toString();\n        errMsg += \" hex chars, \";\n        errMsg += size.toString();\n        errMsg += \" provided.\";\n        return errMsg;\n    },\n\n}\n"]}