{"version":3,"sources":["js/constants.js","js/convert.js","js/wasm_helpers.js","js/ordered_share.js","js/dom.js","js/dkg.js","../node_modules/parcel-bundler/src/builtins/bundle-url.js","../node_modules/parcel-bundler/src/builtins/bundle-loader.js","../node_modules/parcel-plugin-wasm.rs/wasm-loader.js"],"names":["skLen","pkLen","sigLen","maxMsgLen","maxCtLen","decryptionShareLen","row_sizes_by_threshold","commitment_sizes_by_threshold","poly_sizes_by_threshold","asciiToUint8Array","a","b","Uint8Array","length","i","charCodeAt","uint8ArrayToAscii","String","fromCharCode","apply","hexToUint8Array","h","match","map","byte","parseInt","uint8ArrayToHex","reduce","str","toString","padStart","uint8ArrayToBase64","btoa","base64ToUint8Array","atob","split","c","uint8ArrayToBase32z","wasmExports","set_unbase32z_byte","b32zSize","base32z_encode","b32zBytes","get_base32z_byte","push","base32zToUin8array","set_base32z_byte","unb32zSize","base32z_decode","unb32zBytes","get_unbase32z_byte","isWasming","wasmHelpers","sk_bytes_to_pk_bytes","s","pkBytes","set_sk_byte","derive_pk_from_sk","pkByte","get_pk_byte","e","sign_msg","m","sigBytes","set_msg_byte","sigByte","get_sig_byte","verify","p","verified","set_pk_byte","set_sig_byte","set_rng_values","window","crypto","RNG_VALUES_SIZE","get_rng_values_size","rngValues","Uint32Array","getRandomValues","set_rng_value","alert","encrypt","ctBytes","ctSize","ctByte","get_ct_byte","decrypt","msgBytes","set_ct_byte","msgSize","msgByte","get_msg_byte","generate_poly","threshold","polySize","polyBytes","polyByte","get_poly_byte","get_msk_bytes","mskBytes","mskByte","get_msk_byte","get_mpk_bytes","mpkBytes","mpkByte","get_mpk_byte","get_mc_bytes","mcBytes","mcSize","mcByte","get_mc_byte","set_mc_bytes","v","set_mc_byte","get_skshare","skshareBytes","skshareByte","get_skshare_byte","get_pkshare","pkshareBytes","pkshareByte","get_pkshare_byte","combine_signatures","sigshares","shareIndex","share","sigHex","shareHex","sigIndex","byteIndex","set_signature_share_byte","set_share_indexes","combine_signature_shares","create_decryption_share","uiShareIndex","derivedShareIndex","ct","dshareBytes","dshareByte","get_decryption_shares_byte","combine_decryption_shares","totalShares","OrderedShare","self","fromString","bits","DOM","clickLocked","shares","activeCell","from","to","Share","totalNodes","bytesPerCommitment","commitmentBytes","commitmentByte","get_bivar_commitments_byte","shareCreationHex","sharesCreated","bytesPerRow","toNode","rowBytes","rowByte","get_bivar_row_byte","rowHex","sharesReceived","fromNode","sksBytes","sksByte","get_bivar_sks_byte","skshareHex","pksBytes","pksByte","get_bivar_pks_byte","pkshareHex","el","document","createElement","senderId","receiverId","content","textContent","r","Math","floor","rHex","gHex","bHex","colorHex","colorize","style","backgroundColor","uncolorize","activate","deactivateAll","deactivate","dkg","shareCreation","value","innerHTML","action","makeShareLineEl","appendChild","listenForMouseover","addEventListener","ignoreMouseover","removeEventListener","bold","classList","add","unbold","remove","fade","unfade","toggleClickLock","getTotalNodes","background","parentNode","dispatchEvent","Event","boldRow","totalCells","getTotalCells","unboldRow","boldColumn","unboldColumn","showError","msg","error","querySelectorAll","generate","mpkHex","mcHex","allSkshares","allPkshares","allShareCreations","mskPolyHex","generateRandomContributions","generate_bivars","row","append","firstFrom","random","firstTo","skshares","skHex","trim","pkshares","pkHex","bivarCommitments","scHex","mskPolySize","mskPolyBytes","mskPolyByte","boldAll","unboldAll","bundleURL","getBundleURLCached","getBundleURL","Error","err","matches","stack","getBaseURL","url","replace","exports","require","loadBundlesLazy","bundles","Array","isArray","id","Promise","resolve","code","LazyPromise","reject","loadBundles","slice","then","all","loadBundle","bundleLoaders","registerBundleLoader","type","loader","module","load","register","bundle","substring","lastIndexOf","toLowerCase","bundleLoader","resolved","catch","executor","promise","prototype","onSuccess","onError"],"mappings":";;;AA2CO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,wBAAA,QAAA,8BAAA,QAAA,uBAAA,QAAA,mBAAA,QAAA,SAAA,QAAA,UAAA,QAAA,OAAA,QAAA,MAAA,QAAA,WAAA,EAzCA,IAAMA,EAAQ,GAyCd,QAAA,MAAA,EAxCA,IAAMC,EAAQ,GAwCd,QAAA,MAAA,EAvCA,IAAMC,EAAS,GAuCf,QAAA,OAAA,EAtCA,IAAMC,EAAY,QAsClB,QAAA,UAAA,EArCA,IAAMC,EAAW,QAqCjB,QAAA,SAAA,EApCA,IAAMC,EAAqB,GAoC3B,QAAA,mBAAA,EAhCA,IAAMC,EAAyB,CAClC,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAqBG,QAAA,uBAAA,EAhBA,IAAMC,EAAgC,CACzC,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAKG,QAAA,8BAAA,EAAA,IAAMC,EAA0B,CACnC,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAXG,QAAA,wBAAA;;ACaN,aArDM,SAASC,EAAkBC,GAEzB,IADDC,IAAAA,EAAI,IAAIC,WAAWF,EAAEG,QAChBC,EAAE,EAAGA,EAAEJ,EAAEG,OAAQC,IACtBH,EAAEG,GAAKJ,EAAEK,WAAWD,GAEjBH,OAAAA,EAIJ,SAASK,EAAkBN,GACvBO,OAAAA,OAAOC,aAAaC,MAAM,KAAMT,GAGpC,SAASU,EAAgBC,GACrB,OAAA,IAAIT,WAAWS,EAAEC,MAAM,WAAWC,IAAI,SAAAC,GAAQC,OAAAA,SAASD,EAAM,OAEjE,SAASE,EAAgBhB,GACrBA,OAAAA,EAAEiB,OAAO,SAACC,EAAKJ,GAASI,OAAAA,EAAMJ,EAAKK,SAAS,IAAIC,SAAS,EAAG,MAAM,IAGtE,SAASC,EAAmBrB,GACxBsB,OAAAA,KAAKf,OAAOC,aAAaC,MAAM,KAAMT,IAEzC,SAASuB,EAAmBtB,GACxB,OAAA,IAAIC,WAAWsB,KAAKvB,GAAGwB,MAAM,IAAIZ,IAAI,SAASa,GACtCA,OAAAA,EAAErB,WAAW,MAIhC,SAASsB,EAAoB3B,GACpB,IAAA,IAAII,EAAE,EAAGA,EAAEJ,EAAEG,OAAQC,IACtBwB,YAAYC,mBAAmBzB,EAAGJ,EAAEI,IAInC,IAFD0B,IAAAA,EAAWF,YAAYG,eAAe/B,EAAEG,QACxC6B,EAAY,GACP5B,EAAE,EAAGA,EAAE0B,EAAU1B,IAAK,CACvBH,IAAAA,EAAI2B,YAAYK,iBAAiB7B,GACrC4B,EAAUE,KAAKjC,GAEZ+B,OAAAA,EAGX,SAASG,EAAmBlC,GACnB,IAAA,IAAIG,EAAE,EAAGA,EAAEH,EAAEE,OAAQC,IACtBwB,YAAYQ,iBAAiBhC,EAAGH,EAAEG,IAIjC,IAFDiC,IAAAA,EAAaT,YAAYU,eAAerC,EAAEE,QAC1CoC,EAAc,GACTnC,EAAE,EAAGA,EAAEiC,EAAYjC,IAAK,CACzBH,IAAAA,EAAI2B,YAAYY,mBAAmBpC,GACvCmC,EAAYL,KAAKjC,GAEdsC,OAAAA,EACV,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,EAAA,QAAA,kBAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,mBAAA,EAAA,QAAA,mBAAA;;AC/CM,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,QAAA,eAAA,EATP,IAAA,EAAA,EAAA,QAAA,qBACA,EAAA,QAAA,eACA,EAAA,QAAA,aAOO,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAFA,IAAIE,GAAY,EAEhB,QAAA,UAAA,EAAA,IAAMC,EAAc,IAAK,WAG3BC,KAAAA,qBAAuB,SAASC,GACjCH,QAAAA,UAAAA,GAAY,EACRI,IAAAA,EAAU,GACV,IAEK,IAAA,IAAIzC,EAAE,EAAGA,EAAEwC,EAAEzC,OAAQC,IACV0C,EAAAA,QAAAA,YAAY1C,EAAGwC,EAAExC,IAGrB2C,EAAAA,QAAAA,oBAEP,IAAA,IAAI3C,EAAE,EAAGA,EAAEb,EAAhB,MAAuBa,IAAK,CACpB4C,IAAAA,EAASpB,EAAYqB,QAAAA,YAAY7C,GACrCyC,EAAQX,KAAKc,IAGrB,MAAOE,GAEG,MADNT,QAAAA,UAAAA,GAAY,EACN,qBAGHI,OADPJ,QAAAA,UAAAA,GAAY,EACLI,GAKNM,KAAAA,SAAW,SAASP,EAAGQ,GACxBX,QAAAA,UAAAA,GAAY,EACRY,IAAAA,EAAW,GACX,IAEK,IAAA,IAAIjD,EAAE,EAAGA,EAAEwC,EAAEzC,OAAQC,IACV0C,EAAAA,QAAAA,YAAY1C,EAAGwC,EAAExC,IAG5B,IAAA,IAAIA,EAAE,EAAGA,EAAEgD,EAAEjD,OAAQC,IACVkD,EAAAA,QAAAA,aAAalD,EAAGgD,EAAEhD,IAGtB+C,EAAAA,QAAAA,SAASC,EAAEjD,QAElB,IAAA,IAAIC,EAAE,EAAGA,EAAEZ,EAAhB,OAAwBY,IAAK,CACrBmD,IAAAA,EAAU3B,EAAY4B,QAAAA,aAAapD,GACvCiD,EAASnB,KAAKqB,IAGtB,MAAOL,GACHT,QAAAA,UAAAA,GAAY,EAGTY,OADPZ,QAAAA,UAAAA,GAAY,EACLY,GAMNI,KAAAA,OAAS,SAASC,EAAGd,EAAGQ,GACzBX,QAAAA,UAAAA,GAAY,EACRkB,IAAAA,GAAW,EACX,IAEK,IAAA,IAAIvD,EAAE,EAAGA,EAAEsD,EAAEvD,OAAQC,IACVwD,EAAAA,QAAAA,YAAYxD,EAAGsD,EAAEtD,IAG5B,IAAA,IAAIA,EAAE,EAAGA,EAAEwC,EAAEzC,OAAQC,IACVyD,EAAAA,QAAAA,aAAazD,EAAGwC,EAAExC,IAG7B,IAAA,IAAIA,EAAE,EAAGA,EAAEgD,EAAEjD,OAAQC,IACVkD,EAAAA,QAAAA,aAAalD,EAAGgD,EAAEhD,IAElCuD,EAAW/B,EAAY6B,QAAAA,OAAOL,EAAEjD,QAEpC,MAAO+C,GACHT,QAAAA,UAAAA,GAAY,EAGTkB,OADPlB,QAAAA,UAAAA,GAAY,EACLkB,GAGNG,KAAAA,eAAiB,WAEd,GAACC,OAAOC,OAAR,CAIAC,IAAAA,EAAkBrC,EAAYsC,QAAAA,sBAC9BC,EAAY,IAAIC,YAAYH,GAChCF,OAAOC,OAAOK,gBAAgBF,GACzB,IAAA,IAAI/D,EAAE,EAAGA,EAAE+D,EAAUhE,OAAQC,IAClBkE,EAAAA,QAAAA,cAAclE,EAAG+D,EAAU/D,SAPvCmE,MAAM,yEAaTC,KAAAA,QAAU,SAASd,EAAGN,GACvBX,QAAAA,UAAAA,GAAY,EACRgC,IAAAA,EAAU,GACV,IACA/B,EAAYoB,iBAEP,IAAA,IAAI1D,EAAE,EAAGA,EAAEsD,EAAEvD,OAAQC,IACVwD,EAAAA,QAAAA,YAAYxD,EAAGsD,EAAEtD,IAG5B,IAAA,IAAIA,EAAE,EAAGA,EAAEgD,EAAEjD,OAAQC,IACVkD,EAAAA,QAAAA,aAAalD,EAAGgD,EAAEhD,IAM7B,IAFDsE,IAAAA,EAAS9C,EAAY4C,QAAAA,QAAQpB,EAAEjD,QAE1BC,EAAE,EAAGA,EAAEsE,EAAQtE,IAAK,CACrBuE,IAAAA,EAAS/C,EAAYgD,QAAAA,YAAYxE,GACrCqE,EAAQvC,KAAKyC,IAGrB,MAAOzB,GACHT,QAAAA,UAAAA,GAAY,EAGTgC,OADPhC,QAAAA,UAAAA,GAAY,EACLgC,GAKNI,KAAAA,QAAU,SAASjC,EAAGlB,GACvBe,QAAAA,UAAAA,GAAY,EACRqC,IAAAA,EAAW,GACX,IAEK,IAAA,IAAI1E,EAAE,EAAGA,EAAEwC,EAAEzC,OAAQC,IACV0C,EAAAA,QAAAA,YAAY1C,EAAGwC,EAAExC,IAG5B,IAAA,IAAIA,EAAE,EAAGA,EAAEsB,EAAEvB,OAAQC,IACV2E,EAAAA,QAAAA,YAAY3E,EAAGsB,EAAEtB,IAI5B,IAFD4E,IAAAA,EAAUpD,EAAYiD,QAAAA,QAAQnD,EAAEvB,QAE3BC,EAAE,EAAGA,EAAE4E,EAAS5E,IAAK,CACtB6E,IAAAA,EAAUrD,EAAYsD,QAAAA,aAAa9E,GACvC0E,EAAS5C,KAAK+C,IAGtB,MAAO/B,GACHT,QAAAA,UAAAA,GAAY,EAGTqC,OADPrC,QAAAA,UAAAA,GAAY,EACLqC,GAGNK,KAAAA,cAAgB,SAASC,GAC1B1C,EAAYoB,iBACRuB,IAAAA,EAAWvF,EAAwBsF,wBAAAA,GAC3BD,EAAAA,QAAAA,cAAcC,GAErB,IADDE,IAAAA,EAAY,GACPlF,EAAE,EAAGA,EAAEiF,EAAUjF,IAAK,CACvBmF,IAAAA,EAAW3D,EAAY4D,QAAAA,cAAcpF,GACzCkF,EAAUpD,KAAKqD,GAEZD,OAAAA,GAGNG,KAAAA,cAAgB,WAEZ,IADDC,IAAAA,EAAW,GACNtF,EAAE,EAAGA,EAAEd,EAAhB,MAAuBc,IAAK,CACpBuF,IAAAA,EAAU/D,EAAYgE,QAAAA,aAAaxF,GACvCsF,EAASxD,KAAKyD,GAEXD,OAAAA,GAGNG,KAAAA,cAAgB,WAEZ,IADDC,IAAAA,EAAW,GACN1F,EAAE,EAAGA,EAAEb,EAAhB,MAAuBa,IAAK,CACpB2F,IAAAA,EAAUnE,EAAYoE,QAAAA,aAAa5F,GACvC0F,EAAS5D,KAAK6D,GAEXD,OAAAA,GAGNG,KAAAA,aAAe,SAASb,GAGpB,IAFDc,IAAAA,EAAU,GACVC,EAAStG,EAA8BuF,8BAAAA,GAClChF,EAAE,EAAGA,EAAE+F,EAAQ/F,IAAK,CACrBgG,IAAAA,EAASxE,EAAYyE,QAAAA,YAAYjG,GACrC8F,EAAQhE,KAAKkE,GAEVF,OAAAA,GAGNI,KAAAA,aAAe,SAASJ,GAEpB,IAAA,IAAI9F,EAAE,EAAGA,EAAE8F,EAAQ/F,OAAQC,IAAK,CAC7BmG,IAAAA,EAAIL,EAAQ9F,GACJoG,EAAAA,QAAAA,YAAYpG,EAAGmG,KAI9BE,KAAAA,YAAc,WAEV,IADDC,IAAAA,EAAe,GACVtG,EAAE,EAAGA,EAAEd,EAAhB,MAAuBc,IAAK,CACpBuG,IAAAA,EAAc/E,EAAYgF,QAAAA,iBAAiBxG,GAC/CsG,EAAaxE,KAAKyE,GAEfD,OAAAA,GAGNG,KAAAA,YAAc,WAEV,IADDC,IAAAA,EAAe,GACV1G,EAAE,EAAGA,EAAEb,EAAhB,MAAuBa,IAAK,CACpB2G,IAAAA,EAAcnF,EAAYoF,QAAAA,iBAAiB5G,GAC/C0G,EAAa5E,KAAK6E,GAEfD,OAAAA,GAGNG,KAAAA,mBAAqB,SAASf,EAASgB,GAExCxE,EAAY4D,aAAaJ,GAEpB,IAAA,IAAIiB,EAAW,EAAGA,EAAWD,EAAU/G,OAAQgH,IAK3C,IAJDC,IAAAA,EAAQF,EAAUC,GAClBE,EAASD,EAAME,SACfjE,GAAW,EAAgBgE,EAAAA,iBAAAA,GAC3BE,EAAWH,EAAMD,WACZK,EAAU,EAAGA,EAAUnE,EAASlD,OAAQqH,IAAa,CACtDjE,IAAAA,EAAUF,EAASmE,GAMXC,EAAAA,QAAAA,yBAAyBD,EAAWL,EAAY5D,GAChDmE,EAAAA,QAAAA,kBAAkBP,EAAYI,GAItCI,EAAAA,QAAAA,yBAAyBT,EAAU/G,OAAQ+F,EAAQ/F,QAG1D,IADDkD,IAAAA,EAAW,GACNjD,EAAE,EAAGA,EAAEZ,EAAhB,OAAwBY,IAAK,CACrBmD,IAAAA,EAAU3B,EAAY4B,QAAAA,aAAapD,GACvCiD,EAASnB,KAAKqB,GAEXF,OAAAA,GAONuE,KAAAA,wBAA0B,SAAShF,EAAGiF,EAAcC,EAAmBC,GAEnE,IAAA,IAAI3H,EAAE,EAAGA,EAAE2H,EAAG5H,OAAQC,IACX2E,EAAAA,QAAAA,YAAY3E,EAAG2H,EAAG3H,IAG7B,IAAA,IAAIA,EAAE,EAAGA,EAAEwC,EAAEzC,OAAQC,IACV0C,EAAAA,QAAAA,YAAY1C,EAAGwC,EAAExC,IAGhBwB,EAAYgG,QAAAA,wBAAwBC,EAAcE,EAAG5H,QAE1DuH,EAAAA,QAAAA,kBAAkBG,EAAcC,GAGvC,IADDE,IAAAA,EAAc,GACT5H,EAAE,EAAGA,EAAET,EAAhB,mBAAoCS,IAAK,CACjC6H,IAAAA,EAAarG,EAAYsG,QAAAA,2BAA2B9H,EAAGyH,GAC3DG,EAAY9F,KAAK+F,GAEdD,OAAAA,GAQNG,KAAAA,0BAA4B,SAASC,EAAajC,EAAQzB,GAKtD,IAHDM,IAAAA,EAAUpD,EAAYuG,QAAAA,0BAA0BC,EAAajC,EAAQzB,GAErEI,EAAW,GACN1E,EAAE,EAAGA,EAAE4E,EAAS5E,IAAK,CACtB6E,IAAAA,EAAUrD,EAAYsD,QAAAA,aAAa9E,GACvC0E,EAAS5C,KAAK+C,GAEXH,OAAAA,IAtSJ,QAAA,YAAA;;ACWN,aApBM,SAASuD,EAAalB,EAAYG,GAEjCgB,IAAAA,EAAO,KAEXA,EAAKnB,WAAaA,EAClBmB,EAAKhB,SAAWA,EAEXnG,KAAAA,SAAW,WACLmH,OAAAA,EAAKnB,WAAa,IAAMmB,EAAKhB,UAGnCiB,KAAAA,WAAa,SAAS3F,GACnB4F,IAAAA,EAAO5F,EAAEnB,MAAM,KACf+G,GAAe,GAAfA,EAAKrI,OACC,KAAA,6CAEVmI,EAAKnB,WAAapG,SAASyH,EAAK,IAChCF,EAAKhB,SAAWkB,EAAK,IAG5B,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA;;ACjBM,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAAA,IAAMC,EAAM,GAAZ,QAAA,IAAA;;ACIP,aAPA,IAAA,EAAA,EAAA,QAAA,qBACA,EAAA,QAAA,eACA,EAAA,QAAA,kBACA,EAAA,QAAA,aACA,EAAA,QAAA,mBACA,EAAA,QAAA,SAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,WAEQC,IAAAA,GAAc,EAEdC,EAAS,GAETC,EAAa,CACbC,KAAM,EACNC,GAAI,GAGJC,EAAQ,SAASF,EAAMC,EAAIE,EAAY5D,GAEnCkD,IAAAA,EAAO,KAEXA,EAAKO,KAAOA,EACZP,EAAKQ,GAAKA,EAKL,IAFDG,IAAAA,EAAqBpJ,EAA8BuF,8BAAAA,GACnD8D,EAAkB,GACb9I,EAAE,EAAGA,EAAE6I,EAAoB7I,IAAK,CACjC+I,IAAAA,EAAiBvH,EAAYwH,QAAAA,2BAA2BhJ,EAAGyI,GAC/DK,EAAgBhH,KAAKiH,GAEzBb,EAAKe,kBAAmB,EAAgBH,EAAAA,iBAAAA,GAKnC,IAFDI,IAAAA,EAAgB,GAChBC,EAAc3J,EAAuBwF,uBAAAA,GAChCoE,EAAO,EAAGA,EAAOR,EAAYQ,IAAU,CAEvC,IADDC,IAAAA,EAAW,GACNrJ,EAAE,EAAGA,EAAEmJ,EAAanJ,IAAK,CAC1BsJ,IAAAA,EAAU9H,EAAY+H,QAAAA,mBAAmBvJ,EAAGyI,EAAMW,GACtDC,EAASvH,KAAKwH,GAEdE,IAAAA,GAAS,EAAgBH,EAAAA,iBAAAA,GAC7BH,EAAcpH,KAAK0H,GAKlB,IADDC,IAAAA,EAAiB,GACZC,EAAS,EAAGA,EAASd,EAAYc,IAAY,CAE7C,IADDL,IAAAA,EAAW,GACNrJ,EAAE,EAAGA,EAAEmJ,EAAanJ,IAAK,CAC1BsJ,IAAAA,EAAU9H,EAAY+H,QAAAA,mBAAmBvJ,EAAG0J,EAAUhB,GAC1DW,EAASvH,KAAKwH,GAEdE,IAAAA,GAAS,EAAgBH,EAAAA,iBAAAA,GAC7BI,EAAe3H,KAAK0H,GAKnB,IADDG,IAAAA,EAAW,GACN3J,EAAE,EAAGA,EAAEd,EAAhB,MAAuBc,IAAK,CACpB4J,IAAAA,EAAUpI,EAAYqI,QAAAA,mBAAmB7J,EAAG0I,GAChDiB,EAAS7H,KAAK8H,GAElB1B,EAAK4B,YAAa,EAAgBH,EAAAA,iBAAAA,GAI7B,IADDI,IAAAA,EAAW,GACN/J,EAAE,EAAGA,EAAEb,EAAhB,MAAuBa,IAAK,CACpBgK,IAAAA,EAAUxI,EAAYyI,QAAAA,mBAAmBjK,EAAG0I,GAChDqB,EAASjI,KAAKkI,GAElB9B,EAAKgC,YAAa,EAAgBH,EAAAA,iBAAAA,GAGlC7B,EAAKiC,GAAKC,SAASC,cAAc,MAG7BC,IAAAA,EAAW7B,EAAO,EAClB8B,EAAa7B,EAAK,EAClB8B,EAAU,IAAMF,EAAW,IAAMC,EACrCrC,EAAKiC,GAAGM,YAAcD,EAGlBE,IAAAA,EAAIC,KAAKC,MAAMnC,EAAOG,EAAa,KACnC/I,EAAI8K,KAAKC,MAAMlC,EAAKE,EAAa,KAEjCiC,EAAOH,EAAE3J,SAAS,MAAMC,SAAS,EAAG,KACpC8J,EAFI,KAEK/J,SAAS,MAAMC,SAAS,EAAG,KACpC+J,EAAOlL,EAAEkB,SAAS,MAAMC,SAAS,EAAG,KACxCkH,EAAK8C,SAAW,IAAMH,EAAOC,EAAOC,EAEpC7C,EAAK+C,SAAW,WACZ/C,EAAKiC,GAAGe,MAAMC,gBAAkBjD,EAAK8C,UAGzC9C,EAAKkD,WAAa,WACdlD,EAAKiC,GAAGe,MAAMC,gBAAkB,iBAGpCjD,EAAKmD,SAAW,YA4CPC,WACA,IAAA,IAAItL,EAAE,EAAGA,EAAEuI,EAAOxI,OAAQC,IAC3BuI,EAAOvI,GAAGuL,aA7CdD,GACA9C,EAAWC,KAAOA,EAClBD,EAAWE,GAAKA,EAEX,IAAA,IAAI1I,EAAE,EAAGA,EAAE4I,EAAY5I,IAAK,CAE7BuI,EADgBE,EAAOG,EAAa5I,GAClBiL,WAGjB,IAAA,IAAIjL,EAAE,EAAGA,EAAE4I,EAAY5I,IAAK,CAE7BuI,EADgBK,EAAa5I,EAAI0I,GACfuC,WAGjB,IAAA,IAAIjL,EAAE,EAAGA,EAAEqI,EAAImD,IAAAA,IAAIlB,SAASvK,OAAQC,IACjCwL,EAAAA,IAAAA,IAAIlB,SAAStK,GAAGyK,YAAcH,EAGjC,IAAA,IAAItK,EAAE,EAAGA,EAAEqI,EAAImD,IAAAA,IAAIjB,WAAWxK,OAAQC,IACnCwL,EAAAA,IAAAA,IAAIjB,WAAWvK,GAAGyK,YAAcF,EAGpCiB,EAAAA,IAAAA,IAAIC,cAAcC,MAAQxD,EAAKe,iBAE/BuC,EAAAA,IAAAA,IAAItC,cAAcyC,UAAY,GAC7B,IAAA,IAAI3L,EAAE,EAAGA,EAAEkJ,EAAcnJ,OAAQC,IAAK,CACnC4L,IAAAA,EAAS,iBAAmBnD,EAAK,GAAK,aAAezI,EAAE,GACvDmK,EAAK0B,EAAgBpD,EAAMzI,EAAGkJ,EAAclJ,GAAI4L,GAChDJ,EAAAA,IAAAA,IAAItC,cAAc4C,YAAY3B,GAGlCqB,EAAAA,IAAAA,IAAI/B,eAAekC,UAAY,GAC9B,IAAA,IAAI3L,EAAE,EAAGA,EAAEyJ,EAAe1J,OAAQC,IAAK,CACpC4L,IAAAA,EAAS,qBAAuBlD,EAAG,GAAK,eAAiB1I,EAAE,GAC3DmK,EAAK0B,EAAgB7L,EAAG0I,EAAIe,EAAezJ,GAAI4L,GAC/CJ,EAAAA,IAAAA,IAAI/B,eAAeqC,YAAY3B,GAGnCqB,EAAAA,IAAAA,IAAI1B,WAAW4B,MAAQxD,EAAK4B,WAE5B0B,EAAAA,IAAAA,IAAItB,WAAWwB,MAAQxD,EAAKgC,YASpChC,EAAKqD,WAAa,WAET,IAAA,IAAIvL,EAAE,EAAGA,EAAE4I,EAAY5I,IAAK,CAE7BuI,EADgBE,EAAOG,EAAa5I,GAClBoL,aAGjB,IAAA,IAAIpL,EAAE,EAAGA,EAAE4I,EAAY5I,IAAK,CAE7BuI,EADgBK,EAAa5I,EAAI0I,GACf0C,eAmB1BlD,EAAK6D,mBAAqB,WACtB7D,EAAKiC,GAAG6B,iBAAiB,aAAc9D,EAAKmD,UAC5CnD,EAAKkD,cAGTlD,EAAK+D,gBAAkB,WACnB/D,EAAKiC,GAAG+B,oBAAoB,aAAchE,EAAKmD,WAGnDnD,EAAKiE,KAAO,WACRjE,EAAKiC,GAAGiC,UAAUC,IAAI,cAG1BnE,EAAKoE,OAAS,WACVpE,EAAKiC,GAAGiC,UAAUG,OAAO,cAG7BrE,EAAKsE,KAAO,WACRtE,EAAKiC,GAAGiC,UAAUC,IAAI,cAG1BnE,EAAKuE,OAAS,WACVvE,EAAKiC,GAAGiC,UAAUG,OAAO,cAG7BrE,EAAKiC,GAAG6B,iBAAiB,QAxChBU,WACLpE,GAAeA,EACV,IAAA,IAAItI,EAAE,EAAGA,EAAEuI,EAAOxI,OAAQC,IACvBsI,EACAC,EAAOvI,GAAGiM,kBAGV1D,EAAOvI,GAAG+L,qBAGbzD,GACDJ,EAAKmD,aA+BbnD,EAAK6D,sBAIAF,SAAAA,EAAgBpD,EAAMC,EAAIc,EAAQoC,GACnCzB,IAAAA,EAAKC,SAASC,cAAc,OAEhCF,EAAGM,YAAcmB,EAAS,KAAOpC,EAE7BxJ,IAAAA,EAAIyI,EAAOkE,IAAkBjE,EAC7BsC,EAAWzC,EAAOvI,GAAGgL,SAQlBb,OANPA,EAAGe,MAAM0B,WAAa5B,EACtBb,EAAGiC,UAAUC,IAAI,iBAEjBlC,EAAG6B,iBAAiB,aAAc,WAC9B7B,EAAG0C,WAAWC,cAAc,IAAIC,MAAM,iBAEnC5C,EAqCF6C,SAAAA,IACDC,IAAAA,EAAaC,IACb3E,GAAAA,EAAOxI,QAAUkN,EAGhB,IAAA,IAAIjN,EAAE,EAAGA,EAAEiN,EAAYjN,IAAK,CACzBgH,IAAAA,EAAQuB,EAAOvI,GACfgH,EAAMyB,MAAQD,EAAWC,KACzBzB,EAAMmF,OAGNnF,EAAMwF,QAKTW,SAAAA,IACDF,IAAAA,EAAaC,IACb3E,GAAAA,EAAOxI,QAAUkN,EAGhB,IAAA,IAAIjN,EAAE,EAAGA,EAAEiN,EAAYjN,IAAK,CACzBgH,IAAAA,EAAQuB,EAAOvI,GACfgH,EAAMyB,MAAQD,EAAWC,KACzBzB,EAAMsF,SAGNtF,EAAMyF,UAKTW,SAAAA,IACDH,IAAAA,EAAaC,IACb3E,GAAAA,EAAOxI,QAAUkN,EAGhB,IAAA,IAAIjN,EAAE,EAAGA,EAAEiN,EAAYjN,IAAK,CACzBgH,IAAAA,EAAQuB,EAAOvI,GACfgH,EAAM0B,IAAMF,EAAWE,GACvB1B,EAAMmF,OAGNnF,EAAMwF,QAKTa,SAAAA,IACDJ,IAAAA,EAAaC,IACb3E,GAAAA,EAAOxI,QAAUkN,EAGhB,IAAA,IAAIjN,EAAE,EAAGA,EAAEiN,EAAYjN,IAAK,CACzBgH,IAAAA,EAAQuB,EAAOvI,GACfgH,EAAM0B,IAAMF,EAAWE,GACvB1B,EAAMsF,SAGNtF,EAAMyF,UAiBTE,SAAAA,IACEhM,OAAAA,SAAS0H,EAAImD,IAAAA,IAAI5C,WAAW8C,OAG9BwB,SAAAA,IACDtE,IAAAA,EAAa+D,IACV/D,OAAAA,EAAaA,EAGf0E,SAAAA,EAAUC,GACX/B,EAAAA,IAAAA,IAAIgC,MAAM/C,YAAc8C,EACxB/B,EAAAA,IAAAA,IAAIgC,MAAMpB,UAAUG,OAAO,UAzH/Bf,EAAAA,IAAAA,IAAMpB,SAASqD,iBAAiB,aAAa,GAC7CjC,EAAAA,IAAAA,IAAIkC,SAAWrF,EAAImD,IAAAA,IAAIiC,iBAAiB,aAAa,GACrDjC,EAAAA,IAAAA,IAAI5C,WAAaP,EAAImD,IAAAA,IAAIiC,iBAAiB,gBAAgB,GAC1DjC,EAAAA,IAAAA,IAAIxI,EAAIqF,EAAImD,IAAAA,IAAIiC,iBAAiB,MAAM,GACvCjC,EAAAA,IAAAA,IAAIjD,OAASF,EAAImD,IAAAA,IAAIiC,iBAAiB,iBAAiB,GACvDjC,EAAAA,IAAAA,IAAIlB,SAAWjC,EAAImD,IAAAA,IAAIiC,iBAAiB,cACxCjC,EAAAA,IAAAA,IAAIjB,WAAalC,EAAImD,IAAAA,IAAIiC,iBAAiB,gBAC1CjC,EAAAA,IAAAA,IAAIC,cAAgBpD,EAAImD,IAAAA,IAAIiC,iBAAiB,mBAAmB,GAChEjC,EAAAA,IAAAA,IAAItC,cAAgBb,EAAImD,IAAAA,IAAIiC,iBAAiB,mBAAmB,GAChEjC,EAAAA,IAAAA,IAAI/B,eAAiBpB,EAAImD,IAAAA,IAAIiC,iBAAiB,oBAAoB,GAClEjC,EAAAA,IAAAA,IAAI1B,WAAazB,EAAImD,IAAAA,IAAIiC,iBAAiB,gBAAgB,GAC1DjC,EAAAA,IAAAA,IAAItB,WAAa7B,EAAImD,IAAAA,IAAIiC,iBAAiB,gBAAgB,GAC1DjC,EAAAA,IAAAA,IAAImC,OAAStF,EAAImD,IAAAA,IAAIiC,iBAAiB,YAAY,GAClDjC,EAAAA,IAAAA,IAAIoC,MAAQvF,EAAImD,IAAAA,IAAIiC,iBAAiB,WAAW,GAChDjC,EAAAA,IAAAA,IAAIqC,YAAcxF,EAAImD,IAAAA,IAAIiC,iBAAiB,iBAAiB,GAC5DjC,EAAAA,IAAAA,IAAIsC,YAAczF,EAAImD,IAAAA,IAAIiC,iBAAiB,iBAAiB,GAC5DjC,EAAAA,IAAAA,IAAIuC,kBAAoB1F,EAAImD,IAAAA,IAAIiC,iBAAiB,wBAAwB,GACzEjC,EAAAA,IAAAA,IAAIwC,WAAa3F,EAAImD,IAAAA,IAAIiC,iBAAiB,iBAAiB,GAC3DjC,EAAAA,IAAAA,IAAIgC,MAAQnF,EAAImD,IAAAA,IAAIiC,iBAAiB,UAAU,GAE/CjC,EAAAA,IAAAA,IAAIkC,SAAS1B,iBAAiB,QA6GzBiC,WAJDzC,EAAAA,IAAAA,IAAIgC,MAAMpB,UAAUC,IAAI,UACxBb,EAAAA,IAAAA,IAAIgC,MAAM/C,YAAc,GAM5BlC,EAAS,GACLiD,EAAAA,IAAAA,IAAIjD,OAAOoD,UAAY,GACvBH,EAAAA,IAAAA,IAAImC,OAAOjC,MAAQ,GACnBF,EAAAA,IAAAA,IAAIoC,MAAMlC,MAAQ,GAClBF,EAAAA,IAAAA,IAAIqC,YAAYnC,MAAQ,GACxBF,EAAAA,IAAAA,IAAIsC,YAAYpC,MAAQ,GACxBF,EAAAA,IAAAA,IAAIuC,kBAAkBrC,MAAQ,GAC9BF,EAAAA,IAAAA,IAAIwC,WAAWtC,MAAQ,GACvBF,EAAAA,IAAAA,IAAIC,cAAcC,MAAQ,GAC1BF,EAAAA,IAAAA,IAAItC,cAAcyC,UAAY,GAC9BH,EAAAA,IAAAA,IAAI/B,eAAekC,UAAY,GAC/BH,EAAAA,IAAAA,IAAI1B,WAAW4B,MAAQ,GACvBF,EAAAA,IAAAA,IAAItB,WAAWwB,MAAQ,GACfhI,EAAAA,YAAAA,iBAERkF,IAAAA,EAAa+D,IACb3J,EAAIrC,SAAS0H,EAAImD,IAAAA,IAAIxI,EAAE0I,OACvB1G,EAAYhC,EAAI,EAEhB4F,GAAAA,EAAa,EAEb,YADA0E,EAAU,4BAGV1E,GAAAA,EAAa,GAEb,YADA0E,EAAU,iCAGVtI,GAAAA,EAAY,EAEZ,YADAsI,EAAU,+CAGVtK,GAAAA,EAAI4F,EAEJ,YADA0E,EAAU,iDAGFY,EAAAA,QAAAA,gBAAgBlJ,EAAW4D,GAElC,IAAA,IAAIH,EAAK,EAAGA,EAAKG,EAAYH,IAAQ,CAGjC,IADD0F,IAAAA,EAAM/D,SAASC,cAAc,MACxB3B,EAAG,EAAGA,EAAGE,EAAYF,IAAM,CAC5B1B,IAAAA,EAAQ,IAAI2B,EAAMF,EAAMC,EAAIE,EAAY5D,GAE5CuD,EAAOzG,KAAKkF,GAEZmH,EAAIrC,YAAY9E,EAAMmD,IAGtBqB,EAAAA,IAAAA,IAAIjD,OAAO6F,OAAOD,GAGpBE,IAAAA,EAAY1D,KAAKC,MAAMhC,EAAa+B,KAAK2D,UACzCC,EAAU5D,KAAKC,MAAMhC,EAAa+B,KAAK2D,UAE7C/F,EADiB8F,EAAYzF,EAAa2F,GACvBlD,WAGd,IADD3F,IAAAA,EAAW,GACN1F,EAAE,EAAGA,EAAEb,EAAhB,MAAuBa,IAAK,CACpB2F,IAAAA,EAAUnE,EAAYoE,QAAAA,aAAa5F,GACvC0F,EAAS5D,KAAK6D,GAEdgI,IAAAA,GAAS,EAAgBjI,EAAAA,iBAAAA,GACzB8F,EAAAA,IAAAA,IAAImC,OAAOjC,MAAQiC,EAEnB7H,IAAAA,EAAUxD,EAAYuD,YAAAA,aAAab,GACnC4I,GAAQ,EAAgB9H,EAAAA,iBAAAA,GACxB0F,EAAAA,IAAAA,IAAIoC,MAAMlC,MAAQkC,EAGjB,IADDY,IAAAA,EAAW,GACNxO,EAAE,EAAGA,EAAE4I,EAAY5I,IAAK,CACzByO,IAAAA,EAAQlG,EAAOvI,GAAG8J,WACtB0E,GAAY,IAAIvG,EAAJ,aAAiBjI,EAAGyO,GAAO1N,WAAa,KAEpDyK,EAAAA,IAAAA,IAAIqC,YAAYnC,MAAQ8C,EAASE,OAGhC,IADDC,IAAAA,EAAW,GACN3O,EAAE,EAAGA,EAAE4I,EAAY5I,IAAK,CACzB4O,IAAAA,EAAQrG,EAAOvI,GAAGkK,WACtByE,GAAY,IAAI1G,EAAJ,aAAiBjI,EAAG4O,GAAO7N,WAAa,KAEpDyK,EAAAA,IAAAA,IAAIsC,YAAYpC,MAAQiD,EAASD,OAGhC,IADDG,IAAAA,EAAmB,GACd7O,EAAE,EAAGA,EAAE4I,EAAY5I,IAAK,CACzB8O,IAAAA,EAAQvG,EAAOvI,EAAE4I,GAAYK,iBACjC4F,GAAoB,IAAI5G,EAAJ,aAAiBjI,EAAG8O,GAAO/N,WAAa,KAE5DyK,EAAAA,IAAAA,IAAIuC,kBAAkBrC,MAAQmD,EAAiBH,OAI9C,IAFDK,IAAAA,EAAcrP,EAAwBsF,wBAAAA,GACtCgK,EAAe,GACVhP,EAAE,EAAGA,EAAE+O,EAAa/O,IAAK,CAC1BiP,IAAAA,EAAczN,EAAY4D,QAAAA,cAAcpF,GAC5CgP,EAAalN,KAAKmN,GAElBjB,IAAAA,GAAa,EAAgBgB,EAAAA,iBAAAA,GAC7BxD,EAAAA,IAAAA,IAAIwC,WAAWtC,MAAQsC,IA/M3BxC,EAAAA,IAAAA,IAAIC,cAAcO,iBAAiB,aAAcgB,GACjDxB,EAAAA,IAAAA,IAAIC,cAAcO,iBAAiB,WAAYmB,GAC/C3B,EAAAA,IAAAA,IAAItC,cAAc8C,iBAAiB,aAAcgB,GACjDxB,EAAAA,IAAAA,IAAItC,cAAc8C,iBAAiB,WAAYmB,GAC/C3B,EAAAA,IAAAA,IAAI/B,eAAeuC,iBAAiB,aAAcoB,GAClD5B,EAAAA,IAAAA,IAAI/B,eAAeuC,iBAAiB,WAAYqB,GAChD7B,EAAAA,IAAAA,IAAI1B,WAAWkC,iBAAiB,aAAcoB,GAC9C5B,EAAAA,IAAAA,IAAItB,WAAW8B,iBAAiB,aAAcoB,GAC9C5B,EAAAA,IAAAA,IAAI1B,WAAWkC,iBAAiB,WAAYqB,GAC5C7B,EAAAA,IAAAA,IAAItB,WAAW8B,iBAAiB,WAAYqB,GAC5C7B,EAAAA,IAAAA,IAAImC,OAAO3B,iBAAiB,aAmEvBkD,WACA,IAAA,IAAIlP,EAAE,EAAGA,EAAEuI,EAAOxI,OAAQC,IAC3BuI,EAAOvI,GAAGmM,SApEdX,EAAAA,IAAAA,IAAImC,OAAO3B,iBAAiB,WAwEvBmD,WACA,IAAA,IAAInP,EAAE,EAAGA,EAAEuI,EAAOxI,OAAQC,IAC3BuI,EAAOvI,GAAGsM,WAtUtB;;ACPA,IAAI8C,EAAY,KAChB,SAASC,IAKAD,OAJFA,IACHA,EAAYE,KAGPF,EAGT,SAASE,IAEH,IACI,MAAA,IAAIC,MACV,MAAOC,GACHC,IAAAA,GAAW,GAAKD,EAAIE,OAAOlP,MAAM,iEACjCiP,GAAAA,EACKE,OAAAA,EAAWF,EAAQ,IAIvB,MAAA,IAGT,SAASE,EAAWC,GACX,OAAC,GAAKA,GAAKC,QAAQ,uEAAwE,MAAQ,IAG5GC,QAAQR,aAAeD,EACvBS,QAAQH,WAAaA;;AC5BrB,IAAIL,EAAeS,QAAQ,gBAAgBT,aAE3C,SAASU,EAAgBC,GAClBC,MAAMC,QAAQF,KACjBA,EAAU,CAACA,IAGTG,IAAAA,EAAKH,EAAQA,EAAQlQ,OAAS,GAE9B,IACKsQ,OAAAA,QAAQC,QAAQP,QAAQK,IAC/B,MAAOZ,GACHA,GAAa,qBAAbA,EAAIe,KACC,OAAA,IAAIC,EAAY,SAAUF,EAASG,GACxCC,EAAYT,EAAQU,MAAM,GAAI,IAC3BC,KAAK,WACGb,OAAAA,QAAQK,KAEhBQ,KAAKN,EAASG,KAIfjB,MAAAA,GAIV,SAASkB,EAAYT,GACZI,OAAAA,QAAQQ,IAAIZ,EAAQxP,IAAIqQ,IAGjC,IAAIC,EAAgB,GACpB,SAASC,EAAqBC,EAAMC,GAClCH,EAAcE,GAAQC,EAGxBC,OAAOrB,QAAUA,QAAUE,EAC3BF,QAAQsB,KAAOV,EACfZ,QAAQuB,SAAWL,EAEnB,IAAIf,EAAU,GACd,SAASa,EAAWQ,GACdlB,IAAAA,EAMAH,GALAC,MAAMC,QAAQmB,KAChBlB,EAAKkB,EAAO,GACZA,EAASA,EAAO,IAGdrB,EAAQqB,GACHrB,OAAAA,EAAQqB,GAGbL,IAAAA,GAAQK,EAAOC,UAAUD,EAAOE,YAAY,KAAO,EAAGF,EAAOvR,SAAWuR,GAAQG,cAChFC,EAAeX,EAAcE,GAC7BS,OAAAA,EACKzB,EAAQqB,GAAUI,EAAapC,IAAiBgC,GACpDV,KAAK,SAAUe,GAKPA,OAJHA,GACFR,OAAOG,OAAOD,SAASjB,EAAIuB,GAGtBA,IACNC,MAAM,SAAS9O,GAGVA,aAFCmN,EAAQqB,GAETxO,SAXR4O,EAgBN,SAASlB,EAAYqB,GACdA,KAAAA,SAAWA,EACXC,KAAAA,QAAU,KAGjBtB,EAAYuB,UAAUnB,KAAO,SAAUoB,EAAWC,GAEzC,OADc,OAAjB,KAAKH,UAAkB,KAAKA,QAAU,IAAIzB,QAAQ,KAAKwB,WACpD,KAAKC,QAAQlB,KAAKoB,EAAWC,IAGtCzB,EAAYuB,UAAUH,MAAQ,SAAUK,GAE/B,OADc,OAAjB,KAAKH,UAAkB,KAAKA,QAAU,IAAIzB,QAAQ,KAAKwB,WACpD,KAAKC,QAAQF,MAAMK;;;;;AC0d5B,IA3iBA,EA2iBA,EAAA,sFA3iBA,MAAA,EAAA,GAqgBA,SAAA,EAAA,GACA,MAAA,EAAA,MAAA,GACA,IAAA,EAQA,OANA,EADA,mBAAA,YAAA,qBACA,YAAA,qBAAA,EAAA,CAAA,uCAAA,IAEA,EACA,KAAA,GAAA,EAAA,eACA,KAAA,GAAA,YAAA,YAAA,EAAA,CAAA,uCAAA,MAEA,KAAA,EAAA,SAAA,MACA,EAAA,EAAA,KAAA,EAAA,QACA,EAAA,KAAA,IAIA,SAAA,EAAA,GACA,MAAA,EAAA,QAAA,MACA,OAAA,IAAA,QAAA,SAAA,EAAA,GACA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,GACA,EACA,EAAA,GAEA,EAAA,EAAA,YAIA,KAAA,GAAA,YAAA,YAAA,EAAA,CAAA,oCAAA,KACA,KAAA,EAAA,SAAA,MACA,EAAA,EAAA,KAAA,EAAA,QACA,EAAA,KAAA,IA9hBA,EAAA,oBAAA,WAEA,OADA,EAAA,wBACA,GAOA,EAAA,cAAA,SAAA,EAAA,GACA,EAAA,cAAA,EAAA,IAOA,EAAA,YAAA,SAAA,EAAA,GACA,EAAA,YAAA,EAAA,IAOA,EAAA,YAAA,SAAA,GAEA,OADA,EAAA,YAAA,IAQA,EAAA,YAAA,SAAA,EAAA,GACA,EAAA,YAAA,EAAA,IAOA,EAAA,YAAA,SAAA,GAEA,OADA,EAAA,YAAA,IAQA,EAAA,aAAA,SAAA,EAAA,GACA,EAAA,aAAA,EAAA,IAOA,EAAA,aAAA,SAAA,GAEA,OADA,EAAA,aAAA,IAQA,EAAA,aAAA,SAAA,EAAA,GACA,EAAA,aAAA,EAAA,IAOA,EAAA,aAAA,SAAA,GAEA,OADA,EAAA,aAAA,IAQA,EAAA,YAAA,SAAA,EAAA,GACA,EAAA,YAAA,EAAA,IAOA,EAAA,YAAA,SAAA,GAEA,OADA,EAAA,YAAA,IAOA,EAAA,mBAAA,WAEA,OADA,EAAA,uBACA,GAOA,EAAA,cAAA,SAAA,EAAA,GACA,EAAA,cAAA,EAAA,IAOA,EAAA,cAAA,SAAA,GAEA,OADA,EAAA,cAAA,IAQA,EAAA,aAAA,SAAA,EAAA,GACA,EAAA,aAAA,EAAA,IAOA,EAAA,aAAA,SAAA,GAEA,OADA,EAAA,aAAA,IAQA,EAAA,aAAA,SAAA,EAAA,GACA,EAAA,aAAA,EAAA,IAOA,EAAA,aAAA,SAAA,GAEA,OADA,EAAA,aAAA,IAQA,EAAA,YAAA,SAAA,EAAA,GACA,EAAA,YAAA,EAAA,IAOA,EAAA,YAAA,SAAA,GAEA,OADA,EAAA,YAAA,IAQA,EAAA,iBAAA,SAAA,EAAA,GACA,EAAA,iBAAA,EAAA,IAOA,EAAA,iBAAA,SAAA,GAEA,OADA,EAAA,iBAAA,IAQA,EAAA,iBAAA,SAAA,EAAA,GACA,EAAA,iBAAA,EAAA,IAOA,EAAA,iBAAA,SAAA,GAEA,OADA,EAAA,iBAAA,IAUA,EAAA,mBAAA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,mBAAA,EAAA,EAAA,EAAA,IASA,EAAA,mBAAA,SAAA,EAAA,EAAA,GAEA,OADA,EAAA,mBAAA,EAAA,EAAA,IASA,EAAA,2BAAA,SAAA,EAAA,EAAA,GACA,EAAA,2BAAA,EAAA,EAAA,IAQA,EAAA,2BAAA,SAAA,EAAA,GAEA,OADA,EAAA,2BAAA,EAAA,IASA,EAAA,mBAAA,SAAA,EAAA,EAAA,GACA,EAAA,mBAAA,EAAA,EAAA,IAQA,EAAA,mBAAA,SAAA,EAAA,GAEA,OADA,EAAA,mBAAA,EAAA,IASA,EAAA,mBAAA,SAAA,EAAA,EAAA,GACA,EAAA,mBAAA,EAAA,EAAA,IAQA,EAAA,mBAAA,SAAA,EAAA,GAEA,OADA,EAAA,mBAAA,EAAA,IASA,EAAA,yBAAA,SAAA,EAAA,EAAA,GACA,EAAA,yBAAA,EAAA,EAAA,IAQA,EAAA,yBAAA,SAAA,EAAA,GAEA,OADA,EAAA,yBAAA,EAAA,IAQA,EAAA,kBAAA,SAAA,EAAA,GACA,EAAA,kBAAA,EAAA,IAOA,EAAA,kBAAA,SAAA,GAEA,OADA,EAAA,kBAAA,KACA,GAQA,EAAA,2BAAA,SAAA,EAAA,EAAA,GACA,EAAA,2BAAA,EAAA,EAAA,IAQA,EAAA,2BAAA,SAAA,EAAA,GAEA,OADA,EAAA,2BAAA,EAAA,IAQA,EAAA,iBAAA,SAAA,EAAA,GACA,EAAA,iBAAA,EAAA,IAOA,EAAA,iBAAA,SAAA,GAEA,OADA,EAAA,iBAAA,IAQA,EAAA,mBAAA,SAAA,EAAA,GACA,EAAA,mBAAA,EAAA,IAOA,EAAA,mBAAA,SAAA,GAEA,OADA,EAAA,mBAAA,IAMA,EAAA,kBAAA,WACA,EAAA,qBAMA,EAAA,SAAA,SAAA,GACA,EAAA,SAAA,IAOA,EAAA,OAAA,SAAA,GAEA,OAAA,IADA,EAAA,OAAA,IAQA,EAAA,QAAA,SAAA,GAEA,OADA,EAAA,QAAA,KACA,GAOA,EAAA,QAAA,SAAA,GAEA,OADA,EAAA,QAAA,KACA,GAMA,EAAA,cAAA,SAAA,GACA,EAAA,cAAA,IAOA,EAAA,gBAAA,SAAA,GAEA,OADA,EAAA,gBAAA,KACA,GAOA,EAAA,cAAA,SAAA,GAEA,OADA,EAAA,cAAA,KACA,GAMA,EAAA,kBAAA,SAAA,GACA,EAAA,kBAAA,IAOA,EAAA,iBAAA,SAAA,EAAA,GACA,EAAA,iBAAA,EAAA,IAOA,EAAA,gBAAA,SAAA,EAAA,GACA,EAAA,gBAAA,EAAA,IAOA,EAAA,yBAAA,SAAA,EAAA,GACA,EAAA,yBAAA,EAAA,IAQA,EAAA,wBAAA,SAAA,EAAA,GAEA,OADA,EAAA,wBAAA,EAAA,KACA,GASA,EAAA,0BAAA,SAAA,EAAA,EAAA,GAEA,OADA,EAAA,0BAAA,EAAA,EAAA,KACA,GAOA,EAAA,eAAA,SAAA,GAEA,OADA,EAAA,eAAA,KACA,GAOA,EAAA,eAAA,SAAA,GAEA,OADA,EAAA,eAAA,KACA,GAuCA,MAAA,EAAA,OAAA,OAAA,EAAA,GACA,OAAA,QAAA,SAAA,GACA,OAAA,EAAA,GAAA,KAAA,IAAA","file":"dkg.27833ad0.js","sourceRoot":"../html","sourcesContent":["// Contants\n\nexport const skLen = 32; // bytes\nexport const pkLen = 48; // bytes\nexport const sigLen = 96; // bytes\nexport const maxMsgLen = 1049600; // bytes\nexport const maxCtLen = 1049600; // bytes\nexport const decryptionShareLen = 48; // bytes\n\n// the number of bytes in a row derived from a BivarPoly\n// which varies depending on the threshold.\nexport const row_sizes_by_threshold = [\n    40, // threshold 0\n    72, // threshold 1\n    104, // threshold 2\n    136, // threshold 3\n    168, // threshold 4\n    200, // threshold 5\n    232, // threshold 6\n    264, // threshold 7\n    296, // threshold 8\n    328, // threshold 9\n    360, // threshold 10\n]\n\n// the number of bytes in a commitment derived from a BivarPoly\n// which varies depending on the threshold.\nexport const commitment_sizes_by_threshold = [\n    56, // threshold 0\n    104, // threshold 1\n    152, // threshold 2\n    200, // threshold 3\n    248, // threshold 4\n    296, // threshold 5\n    344, // threshold 6\n    392, // threshold 7\n    440, // threshold 8\n    488, // threshold 9\n    536, // threshold 10\n]\n\n// the number of bytes in the master secret key (Poly)\n// which varies depending on the threshold.\nexport const poly_sizes_by_threshold = [\n    40, // threshold 0\n    72, // threshold 1\n    104, // threshold 2\n    136, // threshold 3\n    168, // threshold 4\n    200, // threshold 5\n    232, // threshold 6\n    264, // threshold 7\n    296, // threshold 8\n    328, // threshold 9\n    360, // threshold 10\n]\n","// Encoding conversions\n\n// modified from https://stackoverflow.com/a/11058858\nexport function asciiToUint8Array(a) {\n    let b = new Uint8Array(a.length);\n    for (let i=0; i<a.length; i++) {\n        b[i] = a.charCodeAt(i);\n    }\n    return b;\n}\n// https://stackoverflow.com/a/19102224\n// TODO resolve RangeError possibility here, see SO comments\nexport function uint8ArrayToAscii(a) {\n    return String.fromCharCode.apply(null, a);\n}\n// https://stackoverflow.com/a/50868276\nexport function hexToUint8Array(h) {\n    return new Uint8Array(h.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n}\nexport function uint8ArrayToHex(a) {\n    return a.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n}\n// https://stackoverflow.com/a/12713326\nexport function uint8ArrayToBase64(a) {\n    return btoa(String.fromCharCode.apply(null, a));\n}\nexport function base64ToUint8Array(b) {\n    return new Uint8Array(atob(b).split(\"\").map(function(c) {\n            return c.charCodeAt(0);\n    }));\n}\n\nfunction uint8ArrayToBase32z(a) {\n    for (let i=0; i<a.length; i++) {\n        wasmExports.set_unbase32z_byte(i, a[i]);\n    }\n    let b32zSize = wasmExports.base32z_encode(a.length);\n    let b32zBytes = [];\n    for (let i=0; i<b32zSize; i++) {\n        let b = wasmExports.get_base32z_byte(i);\n        b32zBytes.push(b);\n    }\n    return b32zBytes;\n}\n\nfunction base32zToUin8array(b) {\n    for (let i=0; i<b.length; i++) {\n        wasmExports.set_base32z_byte(i, b[i]);\n    }\n    let unb32zSize = wasmExports.base32z_decode(b.length);\n    let unb32zBytes = [];\n    for (let i=0; i<unb32zSize; i++) {\n        let b = wasmExports.get_unbase32z_byte(i);\n        unb32zBytes.push(b);\n    }\n    return unb32zBytes;\n}\n","import wasmExports from '../../Cargo.toml'\nimport { skLen, pkLen, sigLen, decryptionShareLen, commitment_sizes_by_threshold, poly_sizes_by_threshold } from './constants'\nimport { hexToUint8Array } from './convert'\n\n// threshold_crypto wasm calls. Since they operate on single bytes at a time\n// it's handy to have helpers to do the required looping.\n\nexport let isWasming = false;\n\nexport const wasmHelpers = new (function() {\n\n// s is secret key unit8array\nthis.sk_bytes_to_pk_bytes = function(s) {\n    isWasming = true;\n    let pkBytes = [];\n    try {\n        // set sk bytes\n        for (let i=0; i<s.length; i++) {\n            wasmExports.set_sk_byte(i, s[i]);\n        }\n        // convert into pk bytes\n        wasmExports.derive_pk_from_sk();\n        // read pk bytes\n        for (let i=0; i<pkLen; i++) {\n            let pkByte = wasmExports.get_pk_byte(i);\n            pkBytes.push(pkByte);\n        }\n    }\n    catch (e) {\n        isWasming = false;\n        throw(\"Failed to generate\");\n    }\n    isWasming = false;\n    return pkBytes;\n}\n\n// s is secret key uint8array\n// m is message uint8array\nthis.sign_msg = function(s, m) {\n    isWasming = true;\n    let sigBytes = [];\n    try {\n        // set secret key bytes\n        for (let i=0; i<s.length; i++) {\n            wasmExports.set_sk_byte(i, s[i]);\n        }\n        // set message bytes\n        for (let i=0; i<m.length; i++) {\n            wasmExports.set_msg_byte(i, m[i]);\n        }\n        // sign message\n        wasmExports.sign_msg(m.length);\n        // get signature bytes\n        for (let i=0; i<sigLen; i++) {\n            let sigByte = wasmExports.get_sig_byte(i);\n            sigBytes.push(sigByte);\n        }\n    }\n    catch (e) {\n        isWasming = false;\n    }\n    isWasming = false;\n    return sigBytes;\n}\n\n// p is public key uint8array\n// s is signature uint8array\n// m is message uint8array\nthis.verify = function(p, s, m) {\n    isWasming = true;\n    let verified = false;\n    try {\n        // set public key bytes\n        for (let i=0; i<p.length; i++) {\n            wasmExports.set_pk_byte(i, p[i]);\n        }\n        // set signature bytes\n        for (let i=0; i<s.length; i++) {\n            wasmExports.set_sig_byte(i, s[i]);\n        }\n        // set message bytes\n        for (let i=0; i<m.length; i++) {\n            wasmExports.set_msg_byte(i, m[i]);\n        }\n        verified = wasmExports.verify(m.length);\n    }\n    catch (e) {\n        isWasming = false;\n    }\n    isWasming = false;\n    return verified;\n}\n\nthis.set_rng_values = function() {\n    // Warning if no window.crypto available\n    if (!window.crypto) {\n        alert(\"Secure randomness not available in this browser, output is insecure.\");\n        return\n    }\n    let RNG_VALUES_SIZE = wasmExports.get_rng_values_size();\n    let rngValues = new Uint32Array(RNG_VALUES_SIZE);\n    window.crypto.getRandomValues(rngValues);\n    for (let i=0; i<rngValues.length; i++) {\n        wasmExports.set_rng_value(i, rngValues[i]);\n    }\n}\n\n// p is public key uint8array\n// m is message uint8array\nthis.encrypt = function(p, m) {\n    isWasming = true;\n    let ctBytes = [];\n    try {\n        wasmHelpers.set_rng_values();\n        // set public key bytes\n        for (let i=0; i<p.length; i++) {\n            wasmExports.set_pk_byte(i, p[i]);\n        }\n        // set message bytes\n        for (let i=0; i<m.length; i++) {\n            wasmExports.set_msg_byte(i, m[i]);\n        }\n        // generate strong random u64 used by encrypt\n        // encrypt the message\n        let ctSize = wasmExports.encrypt(m.length);\n        // get ciphertext bytes\n        for (let i=0; i<ctSize; i++) {\n            let ctByte = wasmExports.get_ct_byte(i);\n            ctBytes.push(ctByte);\n        }\n    }\n    catch (e) {\n        isWasming = false;\n    }\n    isWasming = false;\n    return ctBytes;\n}\n\n// s is secret key uint8array\n// c is message uint8array\nthis.decrypt = function(s, c) {\n    isWasming = true;\n    let msgBytes = [];\n    try {\n        // set secret key bytes\n        for (let i=0; i<s.length; i++) {\n            wasmExports.set_sk_byte(i, s[i]);\n        }\n        // set ciphertext bytes\n        for (let i=0; i<c.length; i++) {\n            wasmExports.set_ct_byte(i, c[i]);\n        }\n        let msgSize = wasmExports.decrypt(c.length);\n        // get message bytes\n        for (let i=0; i<msgSize; i++) {\n            let msgByte = wasmExports.get_msg_byte(i);\n            msgBytes.push(msgByte);\n        }\n    }\n    catch (e) {\n        isWasming = false;\n    }\n    isWasming = false;\n    return msgBytes;\n}\n\nthis.generate_poly = function(threshold) {\n    wasmHelpers.set_rng_values();\n    let polySize = poly_sizes_by_threshold[threshold];\n    wasmExports.generate_poly(threshold);\n    let polyBytes = [];\n    for (let i=0; i<polySize; i++) {\n        let polyByte = wasmExports.get_poly_byte(i);\n        polyBytes.push(polyByte);\n    }\n    return polyBytes;\n}\n\nthis.get_msk_bytes = function() {\n    let mskBytes = [];\n    for (let i=0; i<skLen; i++) {\n        let mskByte = wasmExports.get_msk_byte(i);\n        mskBytes.push(mskByte);\n    }\n    return mskBytes;\n}\n\nthis.get_mpk_bytes = function() {\n    let mpkBytes = [];\n    for (let i=0; i<pkLen; i++) {\n        let mpkByte = wasmExports.get_mpk_byte(i);\n        mpkBytes.push(mpkByte);\n    }\n    return mpkBytes;\n}\n\nthis.get_mc_bytes = function(threshold) {\n    let mcBytes = [];\n    let mcSize = commitment_sizes_by_threshold[threshold];\n    for (let i=0; i<mcSize; i++) {\n        let mcByte = wasmExports.get_mc_byte(i);\n        mcBytes.push(mcByte);\n    }\n    return mcBytes;\n}\n\nthis.set_mc_bytes = function(mcBytes) {\n    // set master commitment in wasm\n    for (let i=0; i<mcBytes.length; i++) {\n        let v = mcBytes[i];\n        wasmExports.set_mc_byte(i, v);\n    }\n}\n\nthis.get_skshare = function() {\n    let skshareBytes = [];\n    for (let i=0; i<skLen; i++) {\n        let skshareByte = wasmExports.get_skshare_byte(i);\n        skshareBytes.push(skshareByte);\n    }\n    return skshareBytes;\n}\n\nthis.get_pkshare = function() {\n    let pkshareBytes = [];\n    for (let i=0; i<pkLen; i++) {\n        let pkshareByte = wasmExports.get_pkshare_byte(i);\n        pkshareBytes.push(pkshareByte);\n    }\n    return pkshareBytes;\n}\n\nthis.combine_signatures = function(mcBytes, sigshares) {\n    // set master commitment in wasm\n    wasmHelpers.set_mc_bytes(mcBytes);\n    // set the signature shares\n    for (let shareIndex=0; shareIndex<sigshares.length; shareIndex++) {\n        let share = sigshares[shareIndex];\n        let sigHex = share.shareHex;\n        let sigBytes = hexToUint8Array(sigHex);\n        let sigIndex = share.shareIndex;\n        for (let byteIndex=0; byteIndex<sigBytes.length; byteIndex++) {\n            let sigByte = sigBytes[byteIndex];\n            // NB shareIndex is used instead of sigIndex so we can interate\n            // over both\n            // SHARE_INDEXES[i]\n            // and\n            // SIGNATURE_SHARE_BYTES[i*96:(i+1)*96]\n            wasmExports.set_signature_share_byte(byteIndex, shareIndex, sigByte);\n            wasmExports.set_share_indexes(shareIndex, sigIndex);\n        }\n    }\n    // combine the signatures\n    wasmExports.combine_signature_shares(sigshares.length, mcBytes.length);\n    // read the combined signature\n    let sigBytes = [];\n    for (let i=0; i<sigLen; i++) {\n        let sigByte = wasmExports.get_sig_byte(i);\n        sigBytes.push(sigByte);\n    }\n    return sigBytes;\n}\n\n// s is secret key share bytes\n// ct is ciphertext bytes\n// uiShareIndex is the index of the share as it appears in the UI\n// derivedShareIndex is the index of the share when derived from the poly\nthis.create_decryption_share = function(s, uiShareIndex, derivedShareIndex, ct) {\n    // set ct bytes\n    for (let i=0; i<ct.length; i++) {\n        wasmExports.set_ct_byte(i, ct[i]);\n    }\n    // set secret key share\n    for (let i=0; i<s.length; i++) {\n        wasmExports.set_sk_byte(i, s[i]);\n    }\n    // create decryption share\n    let dshareSize = wasmExports.create_decryption_share(uiShareIndex, ct.length);\n    // set derivedShareIndex\n    wasmExports.set_share_indexes(uiShareIndex, derivedShareIndex);\n    // read decryption share\n    let dshareBytes = [];\n    for (let i=0; i<decryptionShareLen; i++) {\n        let dshareByte = wasmExports.get_decryption_shares_byte(i, uiShareIndex);\n        dshareBytes.push(dshareByte);\n    }\n    return dshareBytes;\n}\n\n// Assumes master commitment is already set.\n// Assumes create_decryption_share is already called for all shares,\n// Which means ciphertext is already set\n// and decryption shares are already set\n// and share_indexes is already set\nthis.combine_decryption_shares = function(totalShares, mcSize, ctSize) {\n    // combine decryption shares\n    let msgSize = wasmExports.combine_decryption_shares(totalShares, mcSize, ctSize);\n    // read msg\n    let msgBytes = [];\n    for (let i=0; i<msgSize; i++) {\n        let msgByte = wasmExports.get_msg_byte(i);\n        msgBytes.push(msgByte);\n    }\n    return msgBytes;\n}\n\n})();\n","export function OrderedShare(shareIndex, shareHex) {\n\n    let self = this;\n\n    self.shareIndex = shareIndex;\n    self.shareHex = shareHex;\n\n    this.toString = function() {\n        return self.shareIndex + \":\" + self.shareHex;\n    }\n\n    this.fromString = function(s) {\n        let bits = s.split(\":\");\n        if (bits.length != 2) {\n            throw(\"Invalid OrderedShare format, must be 'i:s'\");\n        }\n        self.shareIndex = parseInt(bits[0]);\n        self.shareHex = bits[1];\n    }\n\n}\n","// Initiate the virtual Document Object Model.\n// This is used to cache elements in the UI rather than query them every time.\n// It's global so that tests can also easily use it.\nexport const DOM = {};\n","import wasmExports from '../../Cargo.toml'\nimport { skLen, pkLen, row_sizes_by_threshold, commitment_sizes_by_threshold, poly_sizes_by_threshold } from './constants'\nimport { wasmHelpers } from './wasm_helpers'\nimport { uint8ArrayToHex } from './convert'\nimport { OrderedShare } from './ordered_share'\nimport { DOM } from './dom'\n\n(function() {\n\n    let clickLocked = false;\n\n    let shares = [];\n\n    let activeCell = {\n        from: 0,\n        to: 0,\n    }\n\n    let Share = function(from, to, totalNodes, threshold) {\n\n        let self = this;\n\n        self.from = from;\n        self.to = to;\n\n        // get share creation\n        let bytesPerCommitment = commitment_sizes_by_threshold[threshold];\n        let commitmentBytes = [];\n        for (let i=0; i<bytesPerCommitment; i++) {\n            let commitmentByte = wasmExports.get_bivar_commitments_byte(i, from);\n            commitmentBytes.push(commitmentByte);\n        }\n        self.shareCreationHex = uint8ArrayToHex(commitmentBytes);\n\n        // get shares created\n        let sharesCreated = [];\n        let bytesPerRow = row_sizes_by_threshold[threshold];\n        for (let toNode=0; toNode<totalNodes; toNode++) {\n            let rowBytes = [];\n            for (let i=0; i<bytesPerRow; i++) {\n                let rowByte = wasmExports.get_bivar_row_byte(i, from, toNode);\n                rowBytes.push(rowByte);\n            }\n            let rowHex = uint8ArrayToHex(rowBytes);\n            sharesCreated.push(rowHex);\n        }\n\n        // get shares received\n        let sharesReceived = [];\n        for (let fromNode=0; fromNode<totalNodes; fromNode++) {\n            let rowBytes = [];\n            for (let i=0; i<bytesPerRow; i++) {\n                let rowByte = wasmExports.get_bivar_row_byte(i, fromNode, to);\n                rowBytes.push(rowByte);\n            }\n            let rowHex = uint8ArrayToHex(rowBytes);\n            sharesReceived.push(rowHex);\n        }\n\n        // get secret key share\n        let sksBytes = [];\n        for (let i=0; i<skLen; i++) {\n            let sksByte = wasmExports.get_bivar_sks_byte(i, to);\n            sksBytes.push(sksByte);\n        }\n        self.skshareHex = uint8ArrayToHex(sksBytes);\n\n        // get public key share\n        let pksBytes = [];\n        for (let i=0; i<pkLen; i++) {\n            let pksByte = wasmExports.get_bivar_pks_byte(i, to);\n            pksBytes.push(pksByte);\n        }\n        self.pkshareHex = uint8ArrayToHex(pksBytes);\n\n        // create table cell element\n        self.el = document.createElement(\"td\");\n\n        // set text content of cell\n        let senderId = from + 1;\n        let receiverId = to + 1;\n        let content = \"F\" + senderId + \"T\" + receiverId;\n        self.el.textContent = content;\n\n        // calculate color of cell\n        let r = Math.floor(from / totalNodes * 256);\n        let b = Math.floor(to / totalNodes * 256);\n        let g = 128;\n        let rHex = r.toString(\"16\").padStart(2, \"0\");\n        let gHex = g.toString(\"16\").padStart(2, \"0\");\n        let bHex = b.toString(\"16\").padStart(2, \"0\");\n        self.colorHex = \"#\" + rHex + gHex + bHex;\n\n        self.colorize = function() {\n            self.el.style.backgroundColor = self.colorHex;\n        }\n\n        self.uncolorize = function() {\n            self.el.style.backgroundColor = \"rgba(0,0,0,0)\";\n        }\n\n        self.activate = function() {\n            deactivateAll();\n            activeCell.from = from;\n            activeCell.to = to;\n            // higlight row\n            for (let i=0; i<totalNodes; i++) {\n                let cellIndex = from * totalNodes + i;\n                shares[cellIndex].colorize();\n            }\n            // higlight column\n            for (let i=0; i<totalNodes; i++) {\n                let cellIndex = totalNodes * i + to;\n                shares[cellIndex].colorize();\n            }\n            // set sender id\n            for (let i=0; i<DOM.dkg.senderId.length; i++) {\n                DOM.dkg.senderId[i].textContent = senderId;\n            }\n            // set receiver id\n            for (let i=0; i<DOM.dkg.receiverId.length; i++) {\n                DOM.dkg.receiverId[i].textContent = receiverId;\n            }\n            // set share creation\n            DOM.dkg.shareCreation.value = self.shareCreationHex;\n            // set shares created\n            DOM.dkg.sharesCreated.innerHTML = \"\";\n            for (let i=0; i<sharesCreated.length; i++) {\n                let action = \"Sent by node \" + (from+1) + \" to node \" + (i+1);\n                let el = makeShareLineEl(from, i, sharesCreated[i], action);\n                DOM.dkg.sharesCreated.appendChild(el);\n            }\n            // set shares received\n            DOM.dkg.sharesReceived.innerHTML = \"\";\n            for (let i=0; i<sharesReceived.length; i++) {\n                let action = \"Received by node \" + (to+1) + \" from node \" + (i+1);\n                let el = makeShareLineEl(i, to, sharesReceived[i], action);\n                DOM.dkg.sharesReceived.appendChild(el);\n            }\n            // set secret key share\n            DOM.dkg.skshareHex.value = self.skshareHex;\n            // set public key share\n            DOM.dkg.pkshareHex.value = self.pkshareHex;\n        }\n\n        function deactivateAll() {\n            for (let i=0; i<shares.length; i++) {\n                shares[i].deactivate();\n            }\n        }\n\n        self.deactivate = function() {\n            // unhiglight row\n            for (let i=0; i<totalNodes; i++) {\n                let cellIndex = from * totalNodes + i;\n                shares[cellIndex].uncolorize();\n            }\n            // unhiglight column\n            for (let i=0; i<totalNodes; i++) {\n                let cellIndex = totalNodes * i + to;\n                shares[cellIndex].uncolorize();\n            }\n        }\n\n        function toggleClickLock() {\n            clickLocked = !clickLocked;\n            for (let i=0; i<shares.length; i++) {\n                if (clickLocked) {\n                    shares[i].ignoreMouseover();\n                }\n                else {\n                    shares[i].listenForMouseover();\n                }\n            }\n            if (!clickLocked) {\n                self.activate();\n            }\n        }\n\n        self.listenForMouseover = function() {\n            self.el.addEventListener(\"mouseenter\", self.activate);\n            self.uncolorize();\n        }\n\n        self.ignoreMouseover = function() {\n            self.el.removeEventListener(\"mouseenter\", self.activate);\n        }\n\n        self.bold = function() {\n            self.el.classList.add(\"text-bold\");\n        }\n\n        self.unbold = function() {\n            self.el.classList.remove(\"text-bold\");\n        }\n\n        self.fade = function() {\n            self.el.classList.add(\"text-fade\");\n        }\n\n        self.unfade = function() {\n            self.el.classList.remove(\"text-fade\");\n        }\n\n        self.el.addEventListener(\"click\", toggleClickLock);\n\n        self.listenForMouseover();\n\n    }\n\n    function makeShareLineEl(from, to, rowHex, action) {\n        let el = document.createElement(\"div\");\n        // show the hex\n        el.textContent = action + \": \" + rowHex;\n        // get color for this cell\n        let i = from * getTotalNodes() + to;\n        let colorHex = shares[i].colorHex;\n        // add style\n        el.style.background = colorHex;\n        el.classList.add(\"shared-secret\")\n        // pass hover events to parent element\n        el.addEventListener(\"mouseenter\", function() {\n            el.parentNode.dispatchEvent(new Event(\"mouseenter\"));\n        });\n        return el;\n    }\n\n    DOM.dkg = document.querySelectorAll(\"#dkg-keys\")[0];\n    DOM.dkg.generate = DOM.dkg.querySelectorAll(\".generate\")[0];\n    DOM.dkg.totalNodes = DOM.dkg.querySelectorAll(\".total-nodes\")[0];\n    DOM.dkg.m = DOM.dkg.querySelectorAll(\".m\")[0];\n    DOM.dkg.shares = DOM.dkg.querySelectorAll(\".shares tbody\")[0];\n    DOM.dkg.senderId = DOM.dkg.querySelectorAll(\".sender-id\");\n    DOM.dkg.receiverId = DOM.dkg.querySelectorAll(\".receiver-id\");\n    DOM.dkg.shareCreation = DOM.dkg.querySelectorAll(\".share-creation\")[0];\n    DOM.dkg.sharesCreated = DOM.dkg.querySelectorAll(\".shares-created\")[0];\n    DOM.dkg.sharesReceived = DOM.dkg.querySelectorAll(\".shares-received\")[0];\n    DOM.dkg.skshareHex = DOM.dkg.querySelectorAll(\".skshare-hex\")[0];\n    DOM.dkg.pkshareHex = DOM.dkg.querySelectorAll(\".pkshare-hex\")[0];\n    DOM.dkg.mpkHex = DOM.dkg.querySelectorAll(\".mpk-hex\")[0];\n    DOM.dkg.mcHex = DOM.dkg.querySelectorAll(\".mc-hex\")[0];\n    DOM.dkg.allSkshares = DOM.dkg.querySelectorAll(\".all-skshares\")[0];\n    DOM.dkg.allPkshares = DOM.dkg.querySelectorAll(\".all-pkshares\")[0];\n    DOM.dkg.allShareCreations = DOM.dkg.querySelectorAll(\".all-share-creations\")[0];\n    DOM.dkg.mskPolyHex = DOM.dkg.querySelectorAll(\".msk-poly-hex\")[0];\n    DOM.dkg.error = DOM.dkg.querySelectorAll(\".error\")[0];\n\n    DOM.dkg.generate.addEventListener(\"click\", generateRandomContributions);\n    DOM.dkg.shareCreation.addEventListener(\"mouseenter\", boldRow);\n    DOM.dkg.shareCreation.addEventListener(\"mouseout\", unboldRow);\n    DOM.dkg.sharesCreated.addEventListener(\"mouseenter\", boldRow);\n    DOM.dkg.sharesCreated.addEventListener(\"mouseout\", unboldRow);\n    DOM.dkg.sharesReceived.addEventListener(\"mouseenter\", boldColumn);\n    DOM.dkg.sharesReceived.addEventListener(\"mouseout\", unboldColumn);\n    DOM.dkg.skshareHex.addEventListener(\"mouseenter\", boldColumn);\n    DOM.dkg.pkshareHex.addEventListener(\"mouseenter\", boldColumn);\n    DOM.dkg.skshareHex.addEventListener(\"mouseout\", unboldColumn);\n    DOM.dkg.pkshareHex.addEventListener(\"mouseout\", unboldColumn);\n    DOM.dkg.mpkHex.addEventListener(\"mouseenter\", boldAll);\n    DOM.dkg.mpkHex.addEventListener(\"mouseout\", unboldAll);\n\n    function boldRow() {\n        let totalCells = getTotalCells();\n        if (shares.length != totalCells) {\n            return;\n        }\n        for (let i=0; i<totalCells; i++) {\n            let share = shares[i];\n            if (share.from == activeCell.from) {\n                share.bold();\n            }\n            else {\n                share.fade();\n            }\n        }\n    }\n\n    function unboldRow() {\n        let totalCells = getTotalCells();\n        if (shares.length != totalCells) {\n            return;\n        }\n        for (let i=0; i<totalCells; i++) {\n            let share = shares[i];\n            if (share.from == activeCell.from) {\n                share.unbold();\n            }\n            else {\n                share.unfade();\n            }\n        }\n    }\n\n    function boldColumn() {\n        let totalCells = getTotalCells();\n        if (shares.length != totalCells) {\n            return;\n        }\n        for (let i=0; i<totalCells; i++) {\n            let share = shares[i];\n            if (share.to == activeCell.to) {\n                share.bold();\n            }\n            else {\n                share.fade();\n            }\n        }\n    }\n\n    function unboldColumn() {\n        let totalCells = getTotalCells();\n        if (shares.length != totalCells) {\n            return;\n        }\n        for (let i=0; i<totalCells; i++) {\n            let share = shares[i];\n            if (share.to == activeCell.to) {\n                share.unbold();\n            }\n            else {\n                share.unfade();\n            }\n        }\n    }\n\n    function boldAll() {\n        for (let i=0; i<shares.length; i++) {\n            shares[i].bold();\n        }\n    }\n\n    function unboldAll() {\n        for (let i=0; i<shares.length; i++) {\n            shares[i].unbold();\n        }\n    }\n\n    function getTotalNodes() {\n        return parseInt(DOM.dkg.totalNodes.value);\n    }\n\n    function getTotalCells() {\n        let totalNodes = getTotalNodes();\n        return totalNodes * totalNodes;\n    }\n\n    function showError(msg) {\n        DOM.dkg.error.textContent = msg;\n        DOM.dkg.error.classList.remove(\"hidden\");\n    }\n\n    function hideError() {\n        DOM.dkg.error.classList.add(\"hidden\");\n        DOM.dkg.error.textContent = \"\";\n    }\n\n    function generateRandomContributions() {\n        // clear old values\n        hideError();\n        shares = [];\n        DOM.dkg.shares.innerHTML = \"\";\n        DOM.dkg.mpkHex.value = \"\";\n        DOM.dkg.mcHex.value = \"\";\n        DOM.dkg.allSkshares.value = \"\";\n        DOM.dkg.allPkshares.value = \"\";\n        DOM.dkg.allShareCreations.value = \"\";\n        DOM.dkg.mskPolyHex.value = \"\";\n        DOM.dkg.shareCreation.value = \"\";\n        DOM.dkg.sharesCreated.innerHTML = \"\";\n        DOM.dkg.sharesReceived.innerHTML = \"\";\n        DOM.dkg.skshareHex.value = \"\";\n        DOM.dkg.pkshareHex.value = \"\";\n        wasmHelpers.set_rng_values();\n        // get contribution parameters\n        let totalNodes = getTotalNodes();\n        let m = parseInt(DOM.dkg.m.value);\n        let threshold = m - 1;\n        // validate values\n        if (totalNodes < 2) {\n            showError(\"Must be at least 2 nodes\");\n            return;\n        }\n        if (totalNodes > 10) {\n            showError(\"Must be no more than 10 nodes\");\n            return;\n        }\n        if (threshold < 1) {\n            showError(\"Must be at least 2 signing/decrypting nodes\");\n            return;\n        }\n        if (m > totalNodes) {\n            showError(\"Cannot have higher threshold than total nodes\");\n            return;\n        }\n        wasmExports.generate_bivars(threshold, totalNodes);\n        // create contributions\n        for (let from=0; from<totalNodes; from++) {\n            // create the contribution for this node\n            let row = document.createElement(\"tr\");\n            for (let to=0; to<totalNodes; to++) {\n                let share = new Share(from, to, totalNodes, threshold);\n                // keep a record of each share\n                shares.push(share);\n                // show this cell in the table row\n                row.appendChild(share.el);\n            }\n            // show this row in the table\n            DOM.dkg.shares.append(row);\n        }\n        // activate random cell\n        const firstFrom = Math.floor(totalNodes * Math.random());\n        const firstTo = Math.floor(totalNodes * Math.random());\n        let firstIndex = firstFrom * totalNodes + firstTo;\n        shares[firstIndex].activate();\n        // show group master public key\n        let mpkBytes = [];\n        for (let i=0; i<pkLen; i++) {\n            let mpkByte = wasmExports.get_mpk_byte(i);\n            mpkBytes.push(mpkByte);\n        }\n        let mpkHex = uint8ArrayToHex(mpkBytes);\n        DOM.dkg.mpkHex.value = mpkHex;\n        // show group master commitment\n        let mcBytes = wasmHelpers.get_mc_bytes(threshold);\n        let mcHex = uint8ArrayToHex(mcBytes);\n        DOM.dkg.mcHex.value = mcHex;\n        // show all skshares\n        let skshares = \"\";\n        for (let i=0; i<totalNodes; i++) {\n            let skHex = shares[i].skshareHex;\n            skshares += new OrderedShare(i, skHex).toString() + \"\\n\";\n        }\n        DOM.dkg.allSkshares.value = skshares.trim();\n        // show all pkshares\n        let pkshares = \"\";\n        for (let i=0; i<totalNodes; i++) {\n            let pkHex = shares[i].pkshareHex;\n            pkshares += new OrderedShare(i, pkHex).toString() + \"\\n\";\n        }\n        DOM.dkg.allPkshares.value = pkshares.trim();\n        // show all bivar commitments\n        let bivarCommitments = \"\";\n        for (let i=0; i<totalNodes; i++) {\n            let scHex = shares[i*totalNodes].shareCreationHex;\n            bivarCommitments += new OrderedShare(i, scHex).toString() + \"\\n\";\n        }\n        DOM.dkg.allShareCreations.value = bivarCommitments.trim();\n        // show master secret key\n        let mskPolySize = poly_sizes_by_threshold[threshold];\n        let mskPolyBytes = [];\n        for (let i=0; i<mskPolySize; i++) {\n            let mskPolyByte = wasmExports.get_poly_byte(i);\n            mskPolyBytes.push(mskPolyByte);\n        }\n        let mskPolyHex = uint8ArrayToHex(mskPolyBytes);\n        DOM.dkg.mskPolyHex.value = mskPolyHex;\n    }\n\n})();\n","var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var getBundleURL = require('./bundle-url').getBundleURL;\n\nfunction loadBundlesLazy(bundles) {\n  if (!Array.isArray(bundles)) {\n    bundles = [bundles]\n  }\n\n  var id = bundles[bundles.length - 1];\n\n  try {\n    return Promise.resolve(require(id));\n  } catch (err) {\n    if (err.code === 'MODULE_NOT_FOUND') {\n      return new LazyPromise(function (resolve, reject) {\n        loadBundles(bundles.slice(0, -1))\n          .then(function () {\n            return require(id);\n          })\n          .then(resolve, reject);\n      });\n    }\n\n    throw err;\n  }\n}\n\nfunction loadBundles(bundles) {\n  return Promise.all(bundles.map(loadBundle));\n}\n\nvar bundleLoaders = {};\nfunction registerBundleLoader(type, loader) {\n  bundleLoaders[type] = loader;\n}\n\nmodule.exports = exports = loadBundlesLazy;\nexports.load = loadBundles;\nexports.register = registerBundleLoader;\n\nvar bundles = {};\nfunction loadBundle(bundle) {\n  var id;\n  if (Array.isArray(bundle)) {\n    id = bundle[1];\n    bundle = bundle[0];\n  }\n\n  if (bundles[bundle]) {\n    return bundles[bundle];\n  }\n\n  var type = (bundle.substring(bundle.lastIndexOf('.') + 1, bundle.length) || bundle).toLowerCase();\n  var bundleLoader = bundleLoaders[type];\n  if (bundleLoader) {\n    return bundles[bundle] = bundleLoader(getBundleURL() + bundle)\n      .then(function (resolved) {\n        if (resolved) {\n          module.bundle.register(id, resolved);\n        }\n\n        return resolved;\n      }).catch(function(e) {\n        delete bundles[bundle];\n        \n        throw e;\n      });\n  }\n}\n\nfunction LazyPromise(executor) {\n  this.executor = executor;\n  this.promise = null;\n}\n\nLazyPromise.prototype.then = function (onSuccess, onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.then(onSuccess, onError)\n};\n\nLazyPromise.prototype.catch = function (onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.catch(onError)\n};\n","var wasm;const __exports = {};\n\n/**\n* @returns {number}\n*/\n__exports. get_rng_values_size = function() {\n    var ret = wasm.get_rng_values_size();\n    return ret >>> 0;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_rng_value = function(i, v) {\n    wasm.set_rng_value(i, v);\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_sk_byte = function(i, v) {\n    wasm.set_sk_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_sk_byte = function(i) {\n    var ret = wasm.get_sk_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_pk_byte = function(i, v) {\n    wasm.set_pk_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_pk_byte = function(i) {\n    var ret = wasm.get_pk_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_sig_byte = function(i, v) {\n    wasm.set_sig_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_sig_byte = function(i) {\n    var ret = wasm.get_sig_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_msg_byte = function(i, v) {\n    wasm.set_msg_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_msg_byte = function(i) {\n    var ret = wasm.get_msg_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_ct_byte = function(i, v) {\n    wasm.set_ct_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_ct_byte = function(i) {\n    var ret = wasm.get_ct_byte(i);\n    return ret;\n}\n\n/**\n* @returns {number}\n*/\n__exports. get_rng_next_count = function() {\n    var ret = wasm.get_rng_next_count();\n    return ret >>> 0;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_poly_byte = function(i, v) {\n    wasm.set_poly_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_poly_byte = function(i) {\n    var ret = wasm.get_poly_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_msk_byte = function(i, v) {\n    wasm.set_msk_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_msk_byte = function(i) {\n    var ret = wasm.get_msk_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_mpk_byte = function(i, v) {\n    wasm.set_mpk_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_mpk_byte = function(i) {\n    var ret = wasm.get_mpk_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_mc_byte = function(i, v) {\n    wasm.set_mc_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_mc_byte = function(i) {\n    var ret = wasm.get_mc_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_skshare_byte = function(i, v) {\n    wasm.set_skshare_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_skshare_byte = function(i) {\n    var ret = wasm.get_skshare_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_pkshare_byte = function(i, v) {\n    wasm.set_pkshare_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_pkshare_byte = function(i) {\n    var ret = wasm.get_pkshare_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} from_node\n* @param {number} to_node\n* @param {number} v\n*/\n__exports. set_bivar_row_byte = function(i, from_node, to_node, v) {\n    wasm.set_bivar_row_byte(i, from_node, to_node, v);\n}\n\n/**\n* @param {number} i\n* @param {number} from_node\n* @param {number} to_node\n* @returns {number}\n*/\n__exports. get_bivar_row_byte = function(i, from_node, to_node) {\n    var ret = wasm.get_bivar_row_byte(i, from_node, to_node);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} from_node\n* @param {number} v\n*/\n__exports. set_bivar_commitments_byte = function(i, from_node, v) {\n    wasm.set_bivar_commitments_byte(i, from_node, v);\n}\n\n/**\n* @param {number} i\n* @param {number} from_node\n* @returns {number}\n*/\n__exports. get_bivar_commitments_byte = function(i, from_node) {\n    var ret = wasm.get_bivar_commitments_byte(i, from_node);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} node_index\n* @param {number} v\n*/\n__exports. set_bivar_sks_byte = function(i, node_index, v) {\n    wasm.set_bivar_sks_byte(i, node_index, v);\n}\n\n/**\n* @param {number} i\n* @param {number} node_index\n* @returns {number}\n*/\n__exports. get_bivar_sks_byte = function(i, node_index) {\n    var ret = wasm.get_bivar_sks_byte(i, node_index);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} node_index\n* @param {number} v\n*/\n__exports. set_bivar_pks_byte = function(i, node_index, v) {\n    wasm.set_bivar_pks_byte(i, node_index, v);\n}\n\n/**\n* @param {number} i\n* @param {number} node_index\n* @returns {number}\n*/\n__exports. get_bivar_pks_byte = function(i, node_index) {\n    var ret = wasm.get_bivar_pks_byte(i, node_index);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} sig_index\n* @param {number} v\n*/\n__exports. set_signature_share_byte = function(i, sig_index, v) {\n    wasm.set_signature_share_byte(i, sig_index, v);\n}\n\n/**\n* @param {number} i\n* @param {number} sig_index\n* @returns {number}\n*/\n__exports. get_signature_share_byte = function(i, sig_index) {\n    var ret = wasm.get_signature_share_byte(i, sig_index);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_share_indexes = function(i, v) {\n    wasm.set_share_indexes(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_share_indexes = function(i) {\n    var ret = wasm.get_share_indexes(i);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} i\n* @param {number} share_index\n* @param {number} v\n*/\n__exports. set_decryption_shares_byte = function(i, share_index, v) {\n    wasm.set_decryption_shares_byte(i, share_index, v);\n}\n\n/**\n* @param {number} i\n* @param {number} share_index\n* @returns {number}\n*/\n__exports. get_decryption_shares_byte = function(i, share_index) {\n    var ret = wasm.get_decryption_shares_byte(i, share_index);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_base32z_byte = function(i, v) {\n    wasm.set_base32z_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_base32z_byte = function(i) {\n    var ret = wasm.get_base32z_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_unbase32z_byte = function(i, v) {\n    wasm.set_unbase32z_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_unbase32z_byte = function(i) {\n    var ret = wasm.get_unbase32z_byte(i);\n    return ret;\n}\n\n/**\n*/\n__exports. derive_pk_from_sk = function() {\n    wasm.derive_pk_from_sk();\n}\n\n/**\n* @param {number} msg_size\n*/\n__exports. sign_msg = function(msg_size) {\n    wasm.sign_msg(msg_size);\n}\n\n/**\n* @param {number} msg_size\n* @returns {boolean}\n*/\n__exports. verify = function(msg_size) {\n    var ret = wasm.verify(msg_size);\n    return ret !== 0;\n}\n\n/**\n* @param {number} msg_size\n* @returns {number}\n*/\n__exports. encrypt = function(msg_size) {\n    var ret = wasm.encrypt(msg_size);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} ct_size\n* @returns {number}\n*/\n__exports. decrypt = function(ct_size) {\n    var ret = wasm.decrypt(ct_size);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} threshold\n*/\n__exports. generate_poly = function(threshold) {\n    wasm.generate_poly(threshold);\n}\n\n/**\n* @param {number} poly_size\n* @returns {number}\n*/\n__exports. get_poly_degree = function(poly_size) {\n    var ret = wasm.get_poly_degree(poly_size);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} mc_size\n* @returns {number}\n*/\n__exports. get_mc_degree = function(mc_size) {\n    var ret = wasm.get_mc_degree(mc_size);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} poly_size\n*/\n__exports. derive_master_key = function(poly_size) {\n    wasm.derive_master_key(poly_size);\n}\n\n/**\n* @param {number} i\n* @param {number} poly_size\n*/\n__exports. derive_key_share = function(i, poly_size) {\n    wasm.derive_key_share(i, poly_size);\n}\n\n/**\n* @param {number} threshold\n* @param {number} total_nodes\n*/\n__exports. generate_bivars = function(threshold, total_nodes) {\n    wasm.generate_bivars(threshold, total_nodes);\n}\n\n/**\n* @param {number} total_signatures\n* @param {number} commitment_size\n*/\n__exports. combine_signature_shares = function(total_signatures, commitment_size) {\n    wasm.combine_signature_shares(total_signatures, commitment_size);\n}\n\n/**\n* @param {number} share_index\n* @param {number} ct_size\n* @returns {number}\n*/\n__exports. create_decryption_share = function(share_index, ct_size) {\n    var ret = wasm.create_decryption_share(share_index, ct_size);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} total_decryption_shares\n* @param {number} commitment_size\n* @param {number} ct_size\n* @returns {number}\n*/\n__exports. combine_decryption_shares = function(total_decryption_shares, commitment_size, ct_size) {\n    var ret = wasm.combine_decryption_shares(total_decryption_shares, commitment_size, ct_size);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} unbase32z_size\n* @returns {number}\n*/\n__exports. base32z_encode = function(unbase32z_size) {\n    var ret = wasm.base32z_encode(unbase32z_size);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} base32z_size\n* @returns {number}\n*/\n__exports. base32z_decode = function(base32z_size) {\n    var ret = wasm.base32z_decode(base32z_size);\n    return ret >>> 0;\n}\n\n\n\n      function init(wasm_path) {\n          const fetchPromise = fetch(wasm_path);\n          let resultPromise;\n          if (typeof WebAssembly.instantiateStreaming === 'function') {\n              resultPromise = WebAssembly.instantiateStreaming(fetchPromise, { './threshold_crypto_wasm_bridge_bg.js': __exports });\n          } else {\n              resultPromise = fetchPromise\n              .then(response => response.arrayBuffer())\n              .then(buffer => WebAssembly.instantiate(buffer, { './threshold_crypto_wasm_bridge_bg.js': __exports }));\n          }\n          return resultPromise.then(({instance}) => {\n              wasm = init.wasm = instance.exports;\n              __exports.wasm = wasm;\n              return;\n          });\n      };\n      function init_node(wasm_path) {\n          const fs = require('fs');\n          return new Promise(function(resolve, reject) {\n              fs.readFile(__dirname + wasm_path, function(err, data) {\n                  if (err) {\n                      reject(err);\n                  } else {\n                      resolve(data.buffer);\n                  }\n              });\n          })\n          .then(data => WebAssembly.instantiate(data, { './threshold_crypto_wasm_bridge_bg': __exports }))\n          .then(({instance}) => {\n              wasm = init.wasm = instance.exports;\n              __exports.wasm = wasm;\n              return;\n          });\n      }\n      const wasm_bindgen = Object.assign(false ? init_node : init, __exports);\n      module.exports = function loadWASMBundle(bundle) {\n            return wasm_bindgen(bundle).then(() => __exports)\n      }\n    "]}