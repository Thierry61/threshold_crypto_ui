{"version":3,"sources":["js/constants.js","js/errors.js","js/convert.js","js/wasm_helpers.js","js/dom.js","js/decrypt.js","../node_modules/parcel-bundler/src/builtins/bundle-url.js","../node_modules/parcel-bundler/src/builtins/bundle-loader.js","../node_modules/parcel-plugin-wasm.rs/wasm-loader.js"],"names":["skLen","pkLen","sigLen","maxMsgLen","maxCtLen","decryptionShareLen","row_sizes_by_threshold","commitment_sizes_by_threshold","poly_sizes_by_threshold","ErrorDisplay","selector","el","document","querySelectorAll","show","msg","textContent","classList","remove","hide","add","errorMessages","skLength","size","errMsg","toString","pkLength","sigLength","msgLength","ctLength","ctLen","asciiToUint8Array","a","b","Uint8Array","length","i","charCodeAt","uint8ArrayToAscii","String","fromCharCode","apply","hexToUint8Array","h","match","map","byte","parseInt","uint8ArrayToHex","reduce","str","padStart","uint8ArrayToBase64","btoa","base64ToUint8Array","atob","split","c","uint8ArrayToBase32z","wasmExports","set_unbase32z_byte","b32zSize","base32z_encode","b32zBytes","get_base32z_byte","push","base32zToUin8array","set_base32z_byte","unb32zSize","base32z_decode","unb32zBytes","get_unbase32z_byte","isWasming","wasmHelpers","sk_bytes_to_pk_bytes","s","pkBytes","set_sk_byte","derive_pk_from_sk","pkByte","get_pk_byte","e","sign_msg","m","sigBytes","set_msg_byte","sigByte","get_sig_byte","verify","p","verified","set_pk_byte","set_sig_byte","set_rng_values","window","crypto","RNG_VALUES_SIZE","get_rng_values_size","rngValues","Uint32Array","getRandomValues","set_rng_value","alert","encrypt","ctBytes","ctSize","ctByte","get_ct_byte","decrypt","msgBytes","set_ct_byte","msgSize","msgByte","get_msg_byte","generate_poly","threshold","polySize","polyBytes","polyByte","get_poly_byte","get_msk_bytes","mskBytes","mskByte","get_msk_byte","get_mpk_bytes","mpkBytes","mpkByte","get_mpk_byte","get_mc_bytes","mcBytes","mcSize","mcByte","get_mc_byte","set_mc_bytes","v","set_mc_byte","get_skshare","skshareBytes","skshareByte","get_skshare_byte","get_pkshare","pkshareBytes","pkshareByte","get_pkshare_byte","combine_signatures","sigshares","shareIndex","share","sigHex","shareHex","sigIndex","byteIndex","set_signature_share_byte","set_share_indexes","combine_signature_shares","create_decryption_share","uiShareIndex","derivedShareIndex","ct","dshareBytes","dshareByte","get_decryption_shares_byte","combine_decryption_shares","totalShares","DOM","skHex","addEventListener","decryptError","setTimeout","value","trim","ctHex","msgAscii","bundleURL","getBundleURLCached","getBundleURL","Error","err","matches","stack","getBaseURL","url","replace","exports","require","loadBundlesLazy","bundles","Array","isArray","id","Promise","resolve","code","LazyPromise","reject","loadBundles","slice","then","all","loadBundle","bundleLoaders","registerBundleLoader","type","loader","module","load","register","bundle","substring","lastIndexOf","toLowerCase","bundleLoader","resolved","catch","executor","promise","prototype","onSuccess","onError"],"mappings":"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","file":"decrypt.956fcca9.js","sourceRoot":"../html","sourcesContent":["// Contants\n\nexport const skLen = 32; // bytes\nexport const pkLen = 48; // bytes\nexport const sigLen = 96; // bytes\nexport const maxMsgLen = 1049600; // bytes\nexport const maxCtLen = 1049600; // bytes\nexport const decryptionShareLen = 48; // bytes\n\n// the number of bytes in a row derived from a BivarPoly\n// which varies depending on the threshold.\nexport const row_sizes_by_threshold = [\n    40, // threshold 0\n    72, // threshold 1\n    104, // threshold 2\n    136, // threshold 3\n    168, // threshold 4\n    200, // threshold 5\n    232, // threshold 6\n    264, // threshold 7\n    296, // threshold 8\n    328, // threshold 9\n    360, // threshold 10\n]\n\n// the number of bytes in a commitment derived from a BivarPoly\n// which varies depending on the threshold.\nexport const commitment_sizes_by_threshold = [\n    56, // threshold 0\n    104, // threshold 1\n    152, // threshold 2\n    200, // threshold 3\n    248, // threshold 4\n    296, // threshold 5\n    344, // threshold 6\n    392, // threshold 7\n    440, // threshold 8\n    488, // threshold 9\n    536, // threshold 10\n]\n\n// the number of bytes in the master secret key (Poly)\n// which varies depending on the threshold.\nexport const poly_sizes_by_threshold = [\n    40, // threshold 0\n    72, // threshold 1\n    104, // threshold 2\n    136, // threshold 3\n    168, // threshold 4\n    200, // threshold 5\n    232, // threshold 6\n    264, // threshold 7\n    296, // threshold 8\n    328, // threshold 9\n    360, // threshold 10\n]\n","import { skLen, pkLen, sigLen, maxMsgLen, ctLen } from './constants'\n\nexport function ErrorDisplay(selector) {\n\n    let el = document.querySelectorAll(selector)[0];\n\n    this.show = function(msg) {\n        el.textContent = msg;\n        el.classList.remove(\"hidden\");\n    }\n\n    this.hide = function() {\n        el.classList.add(\"hidden\");\n    }\n\n};\n\nexport const errorMessages = {\n\n    skLength: function(size) {\n        let errMsg = \"Secret Key length must be \";\n        errMsg += (skLen * 2).toString();\n        errMsg += \" hex chars, \";\n        errMsg += size.toString();\n        errMsg += \" provided.\";\n        return errMsg;\n    },\n\n    pkLength: function(size) {\n    let errMsg = \"Public Key length must be \";\n        errMsg += (pkLen * 2).toString();\n        errMsg += \" hex chars, \";\n        errMsg += size.toString();\n        errMsg += \" provided.\";\n        return errMsg;\n    },\n\n    sigLength: function(size) {\n        let errMsg = \"Signature length must be \";\n        errMsg += (sigLen * 2).toString();\n        errMsg += \" hex chars, \";\n        errMsg += size.toString();\n        errMsg += \" provided.\";\n        return errMsg;\n    },\n\n    msgLength: function(size) {\n        let errMsg = \"Message length must be \";\n        errMsg += (maxMsgLen).toString();\n        errMsg += \" chars, \";\n        errMsg += size.toString();\n        errMsg += \" provided.\";\n        return errMsg;\n    },\n\n    ctLength: function(size) {\n        let errMsg = \"Ciphertext length must be \";\n        errMsg += (ctLen * 2).toString();\n        errMsg += \" hex chars, \";\n        errMsg += size.toString();\n        errMsg += \" provided.\";\n        return errMsg;\n    },\n\n}\n","// Encoding conversions\n\n// modified from https://stackoverflow.com/a/11058858\nexport function asciiToUint8Array(a) {\n    let b = new Uint8Array(a.length);\n    for (let i=0; i<a.length; i++) {\n        b[i] = a.charCodeAt(i);\n    }\n    return b;\n}\n// https://stackoverflow.com/a/19102224\n// TODO resolve RangeError possibility here, see SO comments\nexport function uint8ArrayToAscii(a) {\n    return String.fromCharCode.apply(null, a);\n}\n// https://stackoverflow.com/a/50868276\nexport function hexToUint8Array(h) {\n    return new Uint8Array(h.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n}\nexport function uint8ArrayToHex(a) {\n    return a.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n}\n// https://stackoverflow.com/a/12713326\nexport function uint8ArrayToBase64(a) {\n    return btoa(String.fromCharCode.apply(null, a));\n}\nexport function base64ToUint8Array(b) {\n    return new Uint8Array(atob(b).split(\"\").map(function(c) {\n            return c.charCodeAt(0);\n    }));\n}\n\nfunction uint8ArrayToBase32z(a) {\n    for (let i=0; i<a.length; i++) {\n        wasmExports.set_unbase32z_byte(i, a[i]);\n    }\n    let b32zSize = wasmExports.base32z_encode(a.length);\n    let b32zBytes = [];\n    for (let i=0; i<b32zSize; i++) {\n        let b = wasmExports.get_base32z_byte(i);\n        b32zBytes.push(b);\n    }\n    return b32zBytes;\n}\n\nfunction base32zToUin8array(b) {\n    for (let i=0; i<b.length; i++) {\n        wasmExports.set_base32z_byte(i, b[i]);\n    }\n    let unb32zSize = wasmExports.base32z_decode(b.length);\n    let unb32zBytes = [];\n    for (let i=0; i<unb32zSize; i++) {\n        let b = wasmExports.get_unbase32z_byte(i);\n        unb32zBytes.push(b);\n    }\n    return unb32zBytes;\n}\n","import wasmExports from '../../Cargo.toml'\nimport { skLen, pkLen, sigLen, decryptionShareLen, commitment_sizes_by_threshold, poly_sizes_by_threshold } from './constants'\nimport { hexToUint8Array } from './convert'\n\n// threshold_crypto wasm calls. Since they operate on single bytes at a time\n// it's handy to have helpers to do the required looping.\n\nexport let isWasming = false;\n\nexport const wasmHelpers = new (function() {\n\n// s is secret key unit8array\nthis.sk_bytes_to_pk_bytes = function(s) {\n    isWasming = true;\n    let pkBytes = [];\n    try {\n        // set sk bytes\n        for (let i=0; i<s.length; i++) {\n            wasmExports.set_sk_byte(i, s[i]);\n        }\n        // convert into pk bytes\n        wasmExports.derive_pk_from_sk();\n        // read pk bytes\n        for (let i=0; i<pkLen; i++) {\n            let pkByte = wasmExports.get_pk_byte(i);\n            pkBytes.push(pkByte);\n        }\n    }\n    catch (e) {\n        isWasming = false;\n        throw(\"Failed to generate\");\n    }\n    isWasming = false;\n    return pkBytes;\n}\n\n// s is secret key uint8array\n// m is message uint8array\nthis.sign_msg = function(s, m) {\n    isWasming = true;\n    let sigBytes = [];\n    try {\n        // set secret key bytes\n        for (let i=0; i<s.length; i++) {\n            wasmExports.set_sk_byte(i, s[i]);\n        }\n        // set message bytes\n        for (let i=0; i<m.length; i++) {\n            wasmExports.set_msg_byte(i, m[i]);\n        }\n        // sign message\n        wasmExports.sign_msg(m.length);\n        // get signature bytes\n        for (let i=0; i<sigLen; i++) {\n            let sigByte = wasmExports.get_sig_byte(i);\n            sigBytes.push(sigByte);\n        }\n    }\n    catch (e) {\n        isWasming = false;\n    }\n    isWasming = false;\n    return sigBytes;\n}\n\n// p is public key uint8array\n// s is signature uint8array\n// m is message uint8array\nthis.verify = function(p, s, m) {\n    isWasming = true;\n    let verified = false;\n    try {\n        // set public key bytes\n        for (let i=0; i<p.length; i++) {\n            wasmExports.set_pk_byte(i, p[i]);\n        }\n        // set signature bytes\n        for (let i=0; i<s.length; i++) {\n            wasmExports.set_sig_byte(i, s[i]);\n        }\n        // set message bytes\n        for (let i=0; i<m.length; i++) {\n            wasmExports.set_msg_byte(i, m[i]);\n        }\n        verified = wasmExports.verify(m.length);\n    }\n    catch (e) {\n        isWasming = false;\n    }\n    isWasming = false;\n    return verified;\n}\n\nthis.set_rng_values = function() {\n    // Warning if no window.crypto available\n    if (!window.crypto) {\n        alert(\"Secure randomness not available in this browser, output is insecure.\");\n        return\n    }\n    let RNG_VALUES_SIZE = wasmExports.get_rng_values_size();\n    let rngValues = new Uint32Array(RNG_VALUES_SIZE);\n    window.crypto.getRandomValues(rngValues);\n    for (let i=0; i<rngValues.length; i++) {\n        wasmExports.set_rng_value(i, rngValues[i]);\n    }\n}\n\n// p is public key uint8array\n// m is message uint8array\nthis.encrypt = function(p, m) {\n    isWasming = true;\n    let ctBytes = [];\n    try {\n        wasmHelpers.set_rng_values();\n        // set public key bytes\n        for (let i=0; i<p.length; i++) {\n            wasmExports.set_pk_byte(i, p[i]);\n        }\n        // set message bytes\n        for (let i=0; i<m.length; i++) {\n            wasmExports.set_msg_byte(i, m[i]);\n        }\n        // generate strong random u64 used by encrypt\n        // encrypt the message\n        let ctSize = wasmExports.encrypt(m.length);\n        // get ciphertext bytes\n        for (let i=0; i<ctSize; i++) {\n            let ctByte = wasmExports.get_ct_byte(i);\n            ctBytes.push(ctByte);\n        }\n    }\n    catch (e) {\n        isWasming = false;\n    }\n    isWasming = false;\n    return ctBytes;\n}\n\n// s is secret key uint8array\n// c is message uint8array\nthis.decrypt = function(s, c) {\n    isWasming = true;\n    let msgBytes = [];\n    try {\n        // set secret key bytes\n        for (let i=0; i<s.length; i++) {\n            wasmExports.set_sk_byte(i, s[i]);\n        }\n        // set ciphertext bytes\n        for (let i=0; i<c.length; i++) {\n            wasmExports.set_ct_byte(i, c[i]);\n        }\n        let msgSize = wasmExports.decrypt(c.length);\n        // get message bytes\n        for (let i=0; i<msgSize; i++) {\n            let msgByte = wasmExports.get_msg_byte(i);\n            msgBytes.push(msgByte);\n        }\n    }\n    catch (e) {\n        isWasming = false;\n    }\n    isWasming = false;\n    return msgBytes;\n}\n\nthis.generate_poly = function(threshold) {\n    wasmHelpers.set_rng_values();\n    let polySize = poly_sizes_by_threshold[threshold];\n    wasmExports.generate_poly(threshold);\n    let polyBytes = [];\n    for (let i=0; i<polySize; i++) {\n        let polyByte = wasmExports.get_poly_byte(i);\n        polyBytes.push(polyByte);\n    }\n    return polyBytes;\n}\n\nthis.get_msk_bytes = function() {\n    let mskBytes = [];\n    for (let i=0; i<skLen; i++) {\n        let mskByte = wasmExports.get_msk_byte(i);\n        mskBytes.push(mskByte);\n    }\n    return mskBytes;\n}\n\nthis.get_mpk_bytes = function() {\n    let mpkBytes = [];\n    for (let i=0; i<pkLen; i++) {\n        let mpkByte = wasmExports.get_mpk_byte(i);\n        mpkBytes.push(mpkByte);\n    }\n    return mpkBytes;\n}\n\nthis.get_mc_bytes = function(threshold) {\n    let mcBytes = [];\n    let mcSize = commitment_sizes_by_threshold[threshold];\n    for (let i=0; i<mcSize; i++) {\n        let mcByte = wasmExports.get_mc_byte(i);\n        mcBytes.push(mcByte);\n    }\n    return mcBytes;\n}\n\nthis.set_mc_bytes = function(mcBytes) {\n    // set master commitment in wasm\n    for (let i=0; i<mcBytes.length; i++) {\n        let v = mcBytes[i];\n        wasmExports.set_mc_byte(i, v);\n    }\n}\n\nthis.get_skshare = function() {\n    let skshareBytes = [];\n    for (let i=0; i<skLen; i++) {\n        let skshareByte = wasmExports.get_skshare_byte(i);\n        skshareBytes.push(skshareByte);\n    }\n    return skshareBytes;\n}\n\nthis.get_pkshare = function() {\n    let pkshareBytes = [];\n    for (let i=0; i<pkLen; i++) {\n        let pkshareByte = wasmExports.get_pkshare_byte(i);\n        pkshareBytes.push(pkshareByte);\n    }\n    return pkshareBytes;\n}\n\nthis.combine_signatures = function(mcBytes, sigshares) {\n    // set master commitment in wasm\n    wasmHelpers.set_mc_bytes(mcBytes);\n    // set the signature shares\n    for (let shareIndex=0; shareIndex<sigshares.length; shareIndex++) {\n        let share = sigshares[shareIndex];\n        let sigHex = share.shareHex;\n        let sigBytes = hexToUint8Array(sigHex);\n        let sigIndex = share.shareIndex;\n        for (let byteIndex=0; byteIndex<sigBytes.length; byteIndex++) {\n            let sigByte = sigBytes[byteIndex];\n            // NB shareIndex is used instead of sigIndex so we can interate\n            // over both\n            // SHARE_INDEXES[i]\n            // and\n            // SIGNATURE_SHARE_BYTES[i*96:(i+1)*96]\n            wasmExports.set_signature_share_byte(byteIndex, shareIndex, sigByte);\n            wasmExports.set_share_indexes(shareIndex, sigIndex);\n        }\n    }\n    // combine the signatures\n    wasmExports.combine_signature_shares(sigshares.length, mcBytes.length);\n    // read the combined signature\n    let sigBytes = [];\n    for (let i=0; i<sigLen; i++) {\n        let sigByte = wasmExports.get_sig_byte(i);\n        sigBytes.push(sigByte);\n    }\n    return sigBytes;\n}\n\n// s is secret key share bytes\n// ct is ciphertext bytes\n// uiShareIndex is the index of the share as it appears in the UI\n// derivedShareIndex is the index of the share when derived from the poly\nthis.create_decryption_share = function(s, uiShareIndex, derivedShareIndex, ct) {\n    // set ct bytes\n    for (let i=0; i<ct.length; i++) {\n        wasmExports.set_ct_byte(i, ct[i]);\n    }\n    // set secret key share\n    for (let i=0; i<s.length; i++) {\n        wasmExports.set_sk_byte(i, s[i]);\n    }\n    // create decryption share\n    let dshareSize = wasmExports.create_decryption_share(uiShareIndex, ct.length);\n    // set derivedShareIndex\n    wasmExports.set_share_indexes(uiShareIndex, derivedShareIndex);\n    // read decryption share\n    let dshareBytes = [];\n    for (let i=0; i<decryptionShareLen; i++) {\n        let dshareByte = wasmExports.get_decryption_shares_byte(i, uiShareIndex);\n        dshareBytes.push(dshareByte);\n    }\n    return dshareBytes;\n}\n\n// Assumes master commitment is already set.\n// Assumes create_decryption_share is already called for all shares,\n// Which means ciphertext is already set\n// and decryption shares are already set\n// and share_indexes is already set\nthis.combine_decryption_shares = function(totalShares, mcSize, ctSize) {\n    // combine decryption shares\n    let msgSize = wasmExports.combine_decryption_shares(totalShares, mcSize, ctSize);\n    // read msg\n    let msgBytes = [];\n    for (let i=0; i<msgSize; i++) {\n        let msgByte = wasmExports.get_msg_byte(i);\n        msgBytes.push(msgByte);\n    }\n    return msgBytes;\n}\n\n})();\n","// Initiate the virtual Document Object Model.\n// This is used to cache elements in the UI rather than query them every time.\n// It's global so that tests can also easily use it.\nexport const DOM = {};\n","import { errorMessages, ErrorDisplay } from './errors'\nimport { skLen, maxCtLen } from './constants'\nimport { isWasming, wasmHelpers } from './wasm_helpers'\nimport { uint8ArrayToAscii, hexToUint8Array } from './convert'\nimport { DOM } from './dom'\n\n(function() {\n\nDOM.decrypt = {};\nDOM.decrypt.skHex = document.querySelectorAll(\"#decrypt .sk-hex\")[0];\nDOM.decrypt.ct = document.querySelectorAll(\"#decrypt .ct\")[0];\nDOM.decrypt.msg = document.querySelectorAll(\"#decrypt .msg\")[0];\n\nDOM.decrypt.skHex.addEventListener(\"input\", decrypt);\nDOM.decrypt.ct.addEventListener(\"input\", decrypt);\n\nconst decryptError = new ErrorDisplay(\"#decrypt .error\");\n\nfunction decrypt() {\n    decryptError.hide();\n    // if already using wasm buffers, try again later\n    if (isWasming) {\n        setTimeout(decrypt, 200);\n        return;\n    }\n    // clear existing value\n    DOM.decrypt.msg.value = \"\";\n    // get secret key hex from UI\n    let skHex = DOM.decrypt.skHex.value.trim();\n    if (skHex.length == 0) {\n        return;\n    }\n    if (skHex.length != skLen * 2) {\n        let errMsg = errorMessages.skLength(skHex.length);\n        decryptError.show(errMsg);\n        return;\n    }\n    // convert secret key to bytes\n    let s = hexToUint8Array(skHex);\n    // get msg from UI\n    let ctHex = DOM.decrypt.ct.value.trim();\n    if (ctHex.length == 0) {\n        return;\n    }\n    if (ctHex.length > maxCtLen * 2) {\n        let errMsg = errorMessages.ctLength(ctHex.length);\n        decryptError.show(errMsg);\n        return;\n    }\n    let c = hexToUint8Array(ctHex);\n    // decrypt\n    let msgBytes = wasmHelpers.decrypt(s, c);\n    let msgAscii = uint8ArrayToAscii(msgBytes);\n    DOM.decrypt.msg.value = msgAscii;\n}\n\n})();\n","var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var getBundleURL = require('./bundle-url').getBundleURL;\n\nfunction loadBundlesLazy(bundles) {\n  if (!Array.isArray(bundles)) {\n    bundles = [bundles]\n  }\n\n  var id = bundles[bundles.length - 1];\n\n  try {\n    return Promise.resolve(require(id));\n  } catch (err) {\n    if (err.code === 'MODULE_NOT_FOUND') {\n      return new LazyPromise(function (resolve, reject) {\n        loadBundles(bundles.slice(0, -1))\n          .then(function () {\n            return require(id);\n          })\n          .then(resolve, reject);\n      });\n    }\n\n    throw err;\n  }\n}\n\nfunction loadBundles(bundles) {\n  return Promise.all(bundles.map(loadBundle));\n}\n\nvar bundleLoaders = {};\nfunction registerBundleLoader(type, loader) {\n  bundleLoaders[type] = loader;\n}\n\nmodule.exports = exports = loadBundlesLazy;\nexports.load = loadBundles;\nexports.register = registerBundleLoader;\n\nvar bundles = {};\nfunction loadBundle(bundle) {\n  var id;\n  if (Array.isArray(bundle)) {\n    id = bundle[1];\n    bundle = bundle[0];\n  }\n\n  if (bundles[bundle]) {\n    return bundles[bundle];\n  }\n\n  var type = (bundle.substring(bundle.lastIndexOf('.') + 1, bundle.length) || bundle).toLowerCase();\n  var bundleLoader = bundleLoaders[type];\n  if (bundleLoader) {\n    return bundles[bundle] = bundleLoader(getBundleURL() + bundle)\n      .then(function (resolved) {\n        if (resolved) {\n          module.bundle.register(id, resolved);\n        }\n\n        return resolved;\n      }).catch(function(e) {\n        delete bundles[bundle];\n        \n        throw e;\n      });\n  }\n}\n\nfunction LazyPromise(executor) {\n  this.executor = executor;\n  this.promise = null;\n}\n\nLazyPromise.prototype.then = function (onSuccess, onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.then(onSuccess, onError)\n};\n\nLazyPromise.prototype.catch = function (onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.catch(onError)\n};\n","var wasm;const __exports = {};\n\n/**\n* @returns {number}\n*/\n__exports. get_rng_values_size = function() {\n    var ret = wasm.get_rng_values_size();\n    return ret >>> 0;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_rng_value = function(i, v) {\n    wasm.set_rng_value(i, v);\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_sk_byte = function(i, v) {\n    wasm.set_sk_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_sk_byte = function(i) {\n    var ret = wasm.get_sk_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_pk_byte = function(i, v) {\n    wasm.set_pk_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_pk_byte = function(i) {\n    var ret = wasm.get_pk_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_sig_byte = function(i, v) {\n    wasm.set_sig_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_sig_byte = function(i) {\n    var ret = wasm.get_sig_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_msg_byte = function(i, v) {\n    wasm.set_msg_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_msg_byte = function(i) {\n    var ret = wasm.get_msg_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_ct_byte = function(i, v) {\n    wasm.set_ct_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_ct_byte = function(i) {\n    var ret = wasm.get_ct_byte(i);\n    return ret;\n}\n\n/**\n* @returns {number}\n*/\n__exports. get_rng_next_count = function() {\n    var ret = wasm.get_rng_next_count();\n    return ret >>> 0;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_poly_byte = function(i, v) {\n    wasm.set_poly_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_poly_byte = function(i) {\n    var ret = wasm.get_poly_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_msk_byte = function(i, v) {\n    wasm.set_msk_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_msk_byte = function(i) {\n    var ret = wasm.get_msk_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_mpk_byte = function(i, v) {\n    wasm.set_mpk_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_mpk_byte = function(i) {\n    var ret = wasm.get_mpk_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_mc_byte = function(i, v) {\n    wasm.set_mc_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_mc_byte = function(i) {\n    var ret = wasm.get_mc_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_skshare_byte = function(i, v) {\n    wasm.set_skshare_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_skshare_byte = function(i) {\n    var ret = wasm.get_skshare_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_pkshare_byte = function(i, v) {\n    wasm.set_pkshare_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_pkshare_byte = function(i) {\n    var ret = wasm.get_pkshare_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} from_node\n* @param {number} to_node\n* @param {number} v\n*/\n__exports. set_bivar_row_byte = function(i, from_node, to_node, v) {\n    wasm.set_bivar_row_byte(i, from_node, to_node, v);\n}\n\n/**\n* @param {number} i\n* @param {number} from_node\n* @param {number} to_node\n* @returns {number}\n*/\n__exports. get_bivar_row_byte = function(i, from_node, to_node) {\n    var ret = wasm.get_bivar_row_byte(i, from_node, to_node);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} from_node\n* @param {number} v\n*/\n__exports. set_bivar_commitments_byte = function(i, from_node, v) {\n    wasm.set_bivar_commitments_byte(i, from_node, v);\n}\n\n/**\n* @param {number} i\n* @param {number} from_node\n* @returns {number}\n*/\n__exports. get_bivar_commitments_byte = function(i, from_node) {\n    var ret = wasm.get_bivar_commitments_byte(i, from_node);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} node_index\n* @param {number} v\n*/\n__exports. set_bivar_sks_byte = function(i, node_index, v) {\n    wasm.set_bivar_sks_byte(i, node_index, v);\n}\n\n/**\n* @param {number} i\n* @param {number} node_index\n* @returns {number}\n*/\n__exports. get_bivar_sks_byte = function(i, node_index) {\n    var ret = wasm.get_bivar_sks_byte(i, node_index);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} node_index\n* @param {number} v\n*/\n__exports. set_bivar_pks_byte = function(i, node_index, v) {\n    wasm.set_bivar_pks_byte(i, node_index, v);\n}\n\n/**\n* @param {number} i\n* @param {number} node_index\n* @returns {number}\n*/\n__exports. get_bivar_pks_byte = function(i, node_index) {\n    var ret = wasm.get_bivar_pks_byte(i, node_index);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} sig_index\n* @param {number} v\n*/\n__exports. set_signature_share_byte = function(i, sig_index, v) {\n    wasm.set_signature_share_byte(i, sig_index, v);\n}\n\n/**\n* @param {number} i\n* @param {number} sig_index\n* @returns {number}\n*/\n__exports. get_signature_share_byte = function(i, sig_index) {\n    var ret = wasm.get_signature_share_byte(i, sig_index);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_share_indexes = function(i, v) {\n    wasm.set_share_indexes(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_share_indexes = function(i) {\n    var ret = wasm.get_share_indexes(i);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} i\n* @param {number} share_index\n* @param {number} v\n*/\n__exports. set_decryption_shares_byte = function(i, share_index, v) {\n    wasm.set_decryption_shares_byte(i, share_index, v);\n}\n\n/**\n* @param {number} i\n* @param {number} share_index\n* @returns {number}\n*/\n__exports. get_decryption_shares_byte = function(i, share_index) {\n    var ret = wasm.get_decryption_shares_byte(i, share_index);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_base32z_byte = function(i, v) {\n    wasm.set_base32z_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_base32z_byte = function(i) {\n    var ret = wasm.get_base32z_byte(i);\n    return ret;\n}\n\n/**\n* @param {number} i\n* @param {number} v\n*/\n__exports. set_unbase32z_byte = function(i, v) {\n    wasm.set_unbase32z_byte(i, v);\n}\n\n/**\n* @param {number} i\n* @returns {number}\n*/\n__exports. get_unbase32z_byte = function(i) {\n    var ret = wasm.get_unbase32z_byte(i);\n    return ret;\n}\n\n/**\n*/\n__exports. derive_pk_from_sk = function() {\n    wasm.derive_pk_from_sk();\n}\n\n/**\n* @param {number} msg_size\n*/\n__exports. sign_msg = function(msg_size) {\n    wasm.sign_msg(msg_size);\n}\n\n/**\n* @param {number} msg_size\n* @returns {boolean}\n*/\n__exports. verify = function(msg_size) {\n    var ret = wasm.verify(msg_size);\n    return ret !== 0;\n}\n\n/**\n* @param {number} msg_size\n* @returns {number}\n*/\n__exports. encrypt = function(msg_size) {\n    var ret = wasm.encrypt(msg_size);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} ct_size\n* @returns {number}\n*/\n__exports. decrypt = function(ct_size) {\n    var ret = wasm.decrypt(ct_size);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} threshold\n*/\n__exports. generate_poly = function(threshold) {\n    wasm.generate_poly(threshold);\n}\n\n/**\n* @param {number} poly_size\n* @returns {number}\n*/\n__exports. get_poly_degree = function(poly_size) {\n    var ret = wasm.get_poly_degree(poly_size);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} mc_size\n* @returns {number}\n*/\n__exports. get_mc_degree = function(mc_size) {\n    var ret = wasm.get_mc_degree(mc_size);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} poly_size\n*/\n__exports. derive_master_key = function(poly_size) {\n    wasm.derive_master_key(poly_size);\n}\n\n/**\n* @param {number} i\n* @param {number} poly_size\n*/\n__exports. derive_key_share = function(i, poly_size) {\n    wasm.derive_key_share(i, poly_size);\n}\n\n/**\n* @param {number} threshold\n* @param {number} total_nodes\n*/\n__exports. generate_bivars = function(threshold, total_nodes) {\n    wasm.generate_bivars(threshold, total_nodes);\n}\n\n/**\n* @param {number} total_signatures\n* @param {number} commitment_size\n*/\n__exports. combine_signature_shares = function(total_signatures, commitment_size) {\n    wasm.combine_signature_shares(total_signatures, commitment_size);\n}\n\n/**\n* @param {number} share_index\n* @param {number} ct_size\n* @returns {number}\n*/\n__exports. create_decryption_share = function(share_index, ct_size) {\n    var ret = wasm.create_decryption_share(share_index, ct_size);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} total_decryption_shares\n* @param {number} commitment_size\n* @param {number} ct_size\n* @returns {number}\n*/\n__exports. combine_decryption_shares = function(total_decryption_shares, commitment_size, ct_size) {\n    var ret = wasm.combine_decryption_shares(total_decryption_shares, commitment_size, ct_size);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} unbase32z_size\n* @returns {number}\n*/\n__exports. base32z_encode = function(unbase32z_size) {\n    var ret = wasm.base32z_encode(unbase32z_size);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} base32z_size\n* @returns {number}\n*/\n__exports. base32z_decode = function(base32z_size) {\n    var ret = wasm.base32z_decode(base32z_size);\n    return ret >>> 0;\n}\n\n\n\n      function init(wasm_path) {\n          const fetchPromise = fetch(wasm_path);\n          let resultPromise;\n          if (typeof WebAssembly.instantiateStreaming === 'function') {\n              resultPromise = WebAssembly.instantiateStreaming(fetchPromise, { './threshold_crypto_wasm_bridge_bg.js': __exports });\n          } else {\n              resultPromise = fetchPromise\n              .then(response => response.arrayBuffer())\n              .then(buffer => WebAssembly.instantiate(buffer, { './threshold_crypto_wasm_bridge_bg.js': __exports }));\n          }\n          return resultPromise.then(({instance}) => {\n              wasm = init.wasm = instance.exports;\n              __exports.wasm = wasm;\n              return;\n          });\n      };\n      function init_node(wasm_path) {\n          const fs = require('fs');\n          return new Promise(function(resolve, reject) {\n              fs.readFile(__dirname + wasm_path, function(err, data) {\n                  if (err) {\n                      reject(err);\n                  } else {\n                      resolve(data.buffer);\n                  }\n              });\n          })\n          .then(data => WebAssembly.instantiate(data, { './threshold_crypto_wasm_bridge_bg': __exports }))\n          .then(({instance}) => {\n              wasm = init.wasm = instance.exports;\n              __exports.wasm = wasm;\n              return;\n          });\n      }\n      const wasm_bindgen = Object.assign(false ? init_node : init, __exports);\n      module.exports = function loadWASMBundle(bundle) {\n            return wasm_bindgen(bundle).then(() => __exports)\n      }\n    "]}