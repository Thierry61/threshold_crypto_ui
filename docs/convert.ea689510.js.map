{"version":3,"sources":["js/convert.js"],"names":["asciiToUint8Array","a","b","Uint8Array","length","i","charCodeAt","uint8ArrayToAscii","String","fromCharCode","apply","hexToUint8Array","h","match","map","byte","parseInt","uint8ArrayToHex","reduce","str","toString","padStart","uint8ArrayToBase64","btoa","base64ToUint8Array","atob","split","c","uint8ArrayToBase32z","wasmExports","set_unbase32z_byte","b32zSize","base32z_encode","b32zBytes","get_base32z_byte","push","base32zToUin8array","set_base32z_byte","unb32zSize","base32z_decode","unb32zBytes","get_unbase32z_byte"],"mappings":";AAwDC,aArDM,SAASA,EAAkBC,GAEzB,IADDC,IAAAA,EAAI,IAAIC,WAAWF,EAAEG,QAChBC,EAAE,EAAGA,EAAEJ,EAAEG,OAAQC,IACtBH,EAAEG,GAAKJ,EAAEK,WAAWD,GAEjBH,OAAAA,EAIJ,SAASK,EAAkBN,GACvBO,OAAAA,OAAOC,aAAaC,MAAM,KAAMT,GAGpC,SAASU,EAAgBC,GACrB,OAAA,IAAIT,WAAWS,EAAEC,MAAM,WAAWC,IAAI,SAAAC,GAAQC,OAAAA,SAASD,EAAM,OAEjE,SAASE,EAAgBhB,GACrBA,OAAAA,EAAEiB,OAAO,SAACC,EAAKJ,GAASI,OAAAA,EAAMJ,EAAKK,SAAS,IAAIC,SAAS,EAAG,MAAM,IAGtE,SAASC,EAAmBrB,GACxBsB,OAAAA,KAAKf,OAAOC,aAAaC,MAAM,KAAMT,IAEzC,SAASuB,EAAmBtB,GACxB,OAAA,IAAIC,WAAWsB,KAAKvB,GAAGwB,MAAM,IAAIZ,IAAI,SAASa,GACtCA,OAAAA,EAAErB,WAAW,MAIhC,SAASsB,EAAoB3B,GACpB,IAAA,IAAII,EAAE,EAAGA,EAAEJ,EAAEG,OAAQC,IACtBwB,YAAYC,mBAAmBzB,EAAGJ,EAAEI,IAInC,IAFD0B,IAAAA,EAAWF,YAAYG,eAAe/B,EAAEG,QACxC6B,EAAY,GACP5B,EAAE,EAAGA,EAAE0B,EAAU1B,IAAK,CACvBH,IAAAA,EAAI2B,YAAYK,iBAAiB7B,GACrC4B,EAAUE,KAAKjC,GAEZ+B,OAAAA,EAGX,SAASG,EAAmBlC,GACnB,IAAA,IAAIG,EAAE,EAAGA,EAAEH,EAAEE,OAAQC,IACtBwB,YAAYQ,iBAAiBhC,EAAGH,EAAEG,IAIjC,IAFDiC,IAAAA,EAAaT,YAAYU,eAAerC,EAAEE,QAC1CoC,EAAc,GACTnC,EAAE,EAAGA,EAAEiC,EAAYjC,IAAK,CACzBH,IAAAA,EAAI2B,YAAYY,mBAAmBpC,GACvCmC,EAAYL,KAAKjC,GAEdsC,OAAAA,EACV,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,EAAA,QAAA,kBAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,mBAAA,EAAA,QAAA,mBAAA","file":"convert.ea689510.js","sourceRoot":"../html","sourcesContent":["// Encoding conversions\n\n// modified from https://stackoverflow.com/a/11058858\nexport function asciiToUint8Array(a) {\n    let b = new Uint8Array(a.length);\n    for (let i=0; i<a.length; i++) {\n        b[i] = a.charCodeAt(i);\n    }\n    return b;\n}\n// https://stackoverflow.com/a/19102224\n// TODO resolve RangeError possibility here, see SO comments\nexport function uint8ArrayToAscii(a) {\n    return String.fromCharCode.apply(null, a);\n}\n// https://stackoverflow.com/a/50868276\nexport function hexToUint8Array(h) {\n    return new Uint8Array(h.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n}\nexport function uint8ArrayToHex(a) {\n    return a.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n}\n// https://stackoverflow.com/a/12713326\nexport function uint8ArrayToBase64(a) {\n    return btoa(String.fromCharCode.apply(null, a));\n}\nexport function base64ToUint8Array(b) {\n    return new Uint8Array(atob(b).split(\"\").map(function(c) {\n            return c.charCodeAt(0);\n    }));\n}\n\nfunction uint8ArrayToBase32z(a) {\n    for (let i=0; i<a.length; i++) {\n        wasmExports.set_unbase32z_byte(i, a[i]);\n    }\n    let b32zSize = wasmExports.base32z_encode(a.length);\n    let b32zBytes = [];\n    for (let i=0; i<b32zSize; i++) {\n        let b = wasmExports.get_base32z_byte(i);\n        b32zBytes.push(b);\n    }\n    return b32zBytes;\n}\n\nfunction base32zToUin8array(b) {\n    for (let i=0; i<b.length; i++) {\n        wasmExports.set_base32z_byte(i, b[i]);\n    }\n    let unb32zSize = wasmExports.base32z_decode(b.length);\n    let unb32zBytes = [];\n    for (let i=0; i<unb32zSize; i++) {\n        let b = wasmExports.get_unbase32z_byte(i);\n        unb32zBytes.push(b);\n    }\n    return unb32zBytes;\n}\n"]}